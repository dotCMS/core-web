{"version":3,"file":"310.d384a05b.iframe.bundle.js","mappings":"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","sources":["./dist/libs/dotcms-webcomponents/dist/esm/dot-card-view.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-094afd6e.js';\n\nconst dotCardViewCss = \":host{display:grid;grid-template-columns:repeat(auto-fill, minmax(260px, 1fr));grid-gap:var(--basic-padding-2)}dot-card-contentlet{height:100%}dot-card-contentlet:before{content:\\\"\\\";display:inline-block;flex:0 0 0;height:0;padding-bottom:calc(100%)}\";\n\nconst getValueAsArray = (value) => {\n  return value && typeof value === 'string' ? value.split(',') : [];\n};\nconst getSelecttion = (items, value) => {\n  if (items && items.length && value && typeof value === 'string') {\n    return items\n      .filter(({ data: { inode } }) => value.split(',').includes(inode))\n      .map(({ data }) => data);\n  }\n  return [];\n};\nlet DotCardView = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.selected = createEvent(this, \"selected\", 7);\n    this.cardClick = createEvent(this, \"cardClick\", 7);\n    this.items = [];\n    this.selection = [];\n  }\n  watchItems(newValue) {\n    this.selection = getSelecttion(newValue, this.value);\n  }\n  watchValue(newValue) {\n    this.selection = getSelecttion(this.items, newValue);\n  }\n  async getValue() {\n    return this.selection;\n  }\n  async clearValue() {\n    this.value = '';\n    const cards = this.getCards();\n    cards.forEach((card) => {\n      card.checked = false;\n    });\n  }\n  componentDidLoad() {\n    this.selection = getSelecttion(this.items, this.value);\n    this.cards = this.getCards();\n  }\n  clearMenu() {\n    this.cards.forEach((card) => {\n      card.hideMenu();\n    });\n  }\n  render() {\n    const value = getValueAsArray(this.value);\n    return (h(Host, null, this.items.map((item) => (h(\"dot-card-contentlet\", { onContextMenu: async (e) => {\n        e.preventDefault();\n        const target = e.target;\n        this.clearMenu();\n        target.showMenu(e.x, e.y);\n      }, onContextMenuClick: () => {\n        this.clearMenu();\n      }, onClick: () => {\n        this.clearMenu();\n        this.cardClick.emit(item.data);\n      }, key: item.data.inode, checked: value.includes(item.data.inode), onCheckboxChange: ({ detail: { originalTarget, shiftKey } }) => {\n        let inBetween = false;\n        if (shiftKey && originalTarget.checked) {\n          this.cards.forEach((card) => {\n            if (card === originalTarget || card === this.lastChecked) {\n              inBetween = !inBetween;\n            }\n            if (inBetween) {\n              card.checked = true;\n              this.setValue(originalTarget, card.item.data);\n            }\n          });\n        }\n        this.lastChecked = originalTarget;\n        this.setValue(originalTarget, item.data);\n      }, item: item })))));\n  }\n  setValue(originalTarget, data) {\n    if (originalTarget.checked) {\n      this.selection.push(data);\n    }\n    else {\n      this.selection = this.selection.filter(({ identifier }) => identifier !== data.identifier);\n    }\n    this.value = this.selection.map(({ inode }) => inode).join(',');\n    this.selected.emit(this.selection);\n  }\n  getCards() {\n    return this.el.shadowRoot.querySelectorAll('dot-card-contentlet');\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"items\": [\"watchItems\"],\n    \"value\": [\"watchValue\"]\n  }; }\n};\nDotCardView.style = dotCardViewCss;\n\nexport { DotCardView as dot_card_view };\n"],"names":["getSelecttion","items","value","length","filter","inode","data","split","includes","map","DotCardView","hostRef","_classCallCheck","registerInstance","this","selected","createEvent","cardClick","selection","_createClass","key","watchItems","newValue","watchValue","getCards","forEach","card","checked","componentDidLoad","cards","clearMenu","hideMenu","render","getValueAsArray","h","Host","item","onContextMenu","e","preventDefault","target","_this","showMenu","x","y","onContextMenuClick","onClick","emit","onCheckboxChange","detail","originalTarget","shiftKey","inBetween","lastChecked","setValue","push","identifier","join","el","shadowRoot","querySelectorAll","get","getElement","style"],"sourceRoot":"webpack:///"}