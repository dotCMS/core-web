{"version":3,"file":"44.0edf4181.iframe.bundle.js","mappings":"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","sources":["./dist/libs/dotcms-webcomponents/dist/esm/dot-key-value.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-5965c697.js';\nimport { f as getDotOptionsFromFieldValue, g as getOriginalStatus, a as getClassNames, b as getTagError, c as getTagHint, h as getHintId, u as updateStatus, d as getStringFromDotKeyArray } from './utils-4086c226.js';\nimport { c as checkProp } from './checkProp-286e406e.js';\n\nconst dotKeyValueCss = \"\";\n\nconst mapToKeyValue = ({ label, value }) => {\n  return {\n    key: label,\n    value\n  };\n};\nconst DotKeyValueComponent = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.dotValueChange = createEvent(this, \"dotValueChange\", 7);\n    this.dotStatusChange = createEvent(this, \"dotStatusChange\", 7);\n    /** Value of the field */\n    this.value = '';\n    /** Name that will be used as ID */\n    this.name = '';\n    /** (optional) Text to be rendered next to input field */\n    this.label = '';\n    /** (optional) Hint text that suggest a clue of the field */\n    this.hint = '';\n    /** (optional) Determine if it is mandatory */\n    this.required = false;\n    /** (optional) Text that will be shown when required is set and condition is not met */\n    this.requiredMessage = 'This field is required';\n    /** (optional) Text that will be shown when required is set and condition is not met */\n    this.duplicatedKeyMessage = 'The key already exists';\n    /** (optional) Disables field's interaction */\n    this.disabled = false;\n    /** (optional) Allows unique keys only */\n    this.uniqueKeys = false;\n    this.items = [];\n  }\n  valueWatch() {\n    this.value = checkProp(this, 'value', 'string');\n    this.items = getDotOptionsFromFieldValue(this.value).map(mapToKeyValue);\n  }\n  /**\n   * Reset properties of the field, clear value and emit events.\n   */\n  async reset() {\n    this.items = [];\n    this.value = '';\n    this.status = getOriginalStatus(this.isValid());\n    this.emitChanges();\n  }\n  deleteItemHandler(event) {\n    event.stopImmediatePropagation();\n    this.items = this.items.filter((_item, index) => index !== event.detail);\n    this.errorExistingKey = false;\n    this.refreshStatus();\n    this.emitChanges();\n  }\n  reorderItemsHandler(event) {\n    event.stopImmediatePropagation();\n    // Hack to clean the items in DOM without showing \"No values\" label\n    this.items = [{ key: ' ', value: '' }];\n    const keys = document.querySelectorAll('.key-value-table-wc__key');\n    const values = document.querySelectorAll('.key-value-table-wc__value');\n    let keyValueRawData = '';\n    for (let i = 0, total = keys.length; i < total; i++) {\n      keyValueRawData += `${keys[i].innerHTML}|${values[i].innerHTML},`;\n    }\n    // Timeout to let the DOM get cleaned and then repopulate with list of keyValues\n    setTimeout(() => {\n      this.items = [\n        ...getDotOptionsFromFieldValue(keyValueRawData.substring(0, keyValueRawData.length - 1)).map(mapToKeyValue)\n      ];\n      this.refreshStatus();\n      this.emitChanges();\n    }, 100);\n  }\n  addItemHandler({ detail }) {\n    this.refreshStatus();\n    this.errorExistingKey = this.items.some((item) => item.key === detail.key);\n    if ((this.uniqueKeys && !this.errorExistingKey) || !this.uniqueKeys) {\n      this.items = [...this.items, detail];\n      this.emitChanges();\n    }\n  }\n  keyChangedHandler() {\n    // Reset errorExistingKey value when KEY is changed\n    if (this.errorExistingKey) {\n      this.errorExistingKey = false;\n    }\n  }\n  componentWillLoad() {\n    this.validateProps();\n    this.setOriginalStatus();\n    this.emitStatusChange();\n  }\n  render() {\n    const classes = getClassNames(this.status, this.isValid() && !this.errorExistingKey, this.required);\n    return (h(Host, { class: Object.assign({}, classes) }, h(\"dot-label\", { \"aria-describedby\": getHintId(this.hint), tabIndex: this.hint ? 0 : null, label: this.label, required: this.required, name: this.name }, !this.disabled ? this.getKeyValueForm() : '', h(\"key-value-table\", { onClick: (e) => {\n        e.preventDefault();\n      }, \"button-label\": this.listDeleteLabel, disabled: this.isDisabled(), items: this.items })), getTagHint(this.hint), getTagError(this.showErrorMessage(), this.getErrorMessage())));\n  }\n  getKeyValueForm() {\n    return (h(\"key-value-form\", { onLostFocus: this.blurHandler.bind(this), \"add-button-label\": this.formAddButtonLabel, disabled: this.isDisabled(), \"empty-dropdown-option-label\": this.whiteListEmptyOptionLabel, \"key-label\": this.formKeyLabel, \"key-placeholder\": this.formKeyPlaceholder, \"value-label\": this.formValueLabel, \"value-placeholder\": this.formValuePlaceholder, \"white-list\": this.whiteList }));\n  }\n  isDisabled() {\n    return this.disabled || null;\n  }\n  blurHandler() {\n    if (!this.status.dotTouched) {\n      this.status = updateStatus(this.status, {\n        dotTouched: true\n      });\n      this.emitStatusChange();\n    }\n  }\n  validateProps() {\n    this.valueWatch();\n  }\n  setOriginalStatus() {\n    this.status = getOriginalStatus(this.isValid());\n  }\n  isValid() {\n    return !(this.required && !this.items.length);\n  }\n  showErrorMessage() {\n    return this.getErrorMessage() && !this.status.dotPristine;\n  }\n  getErrorMessage() {\n    let errorMsg = '';\n    if (this.errorExistingKey) {\n      errorMsg = this.duplicatedKeyMessage;\n    }\n    else if (!this.isValid()) ;\n    return errorMsg;\n  }\n  refreshStatus() {\n    this.status = updateStatus(this.status, {\n      dotTouched: true,\n      dotPristine: false,\n      dotValid: this.isValid()\n    });\n  }\n  emitStatusChange() {\n    this.dotStatusChange.emit({\n      name: this.name,\n      status: this.status\n    });\n  }\n  emitValueChange() {\n    const returnedValue = getStringFromDotKeyArray(this.items);\n    this.dotValueChange.emit({\n      name: this.name,\n      value: returnedValue\n    });\n  }\n  emitChanges() {\n    this.emitStatusChange();\n    this.emitValueChange();\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"valueWatch\"]\n  }; }\n};\nDotKeyValueComponent.style = dotKeyValueCss;\n\nexport { DotKeyValueComponent as dot_key_value };\n"],"names":["mapToKeyValue","key","label","value","DotKeyValueComponent","hostRef","_classCallCheck","registerInstance","this","dotValueChange","createEvent","dotStatusChange","name","hint","required","requiredMessage","duplicatedKeyMessage","disabled","uniqueKeys","items","_createClass","valueWatch","checkProp","getDotOptionsFromFieldValue","map","status","getOriginalStatus","isValid","emitChanges","deleteItemHandler","event","stopImmediatePropagation","filter","_item","index","detail","errorExistingKey","refreshStatus","reorderItemsHandler","keys","document","querySelectorAll","values","keyValueRawData","i","total","length","innerHTML","setTimeout","_this","substring","addItemHandler","some","item","keyChangedHandler","componentWillLoad","validateProps","setOriginalStatus","emitStatusChange","render","classes","getClassNames","h","Host","class","Object","assign","getHintId","tabIndex","getKeyValueForm","onClick","e","preventDefault","listDeleteLabel","isDisabled","getTagHint","getTagError","showErrorMessage","getErrorMessage","onLostFocus","blurHandler","bind","formAddButtonLabel","whiteListEmptyOptionLabel","formKeyLabel","formKeyPlaceholder","formValueLabel","formValuePlaceholder","whiteList","dotTouched","updateStatus","dotPristine","errorMsg","dotValid","emit","emitValueChange","returnedValue","getStringFromDotKeyArray","get","getElement","style"],"sourceRoot":"webpack:///"}