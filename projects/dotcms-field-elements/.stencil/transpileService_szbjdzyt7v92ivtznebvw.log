{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-binary-file/dot-binary-file.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/models","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-label"},{"tag":"dot-binary-file-preview"},{"tag":"dot-binary-text-field"},{"tag":"dot-binary-upload-button"},{"tag":"dot-error-message"}],"cmpMeta":{"tagNameMeta":"dot-binary-file","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-binary-file/dot-binary-file.scss","cmpRelativePath":"dot-binary-file.scss","originalComponentPath":"dot-binary-file.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotBinaryFileComponent","tags":[{"name":"export"},{"name":"class","text":"DotBinaryFile"}],"documentation":"Represent a dotcms binary file control.","type":"typeof DotBinaryFileComponent"},"encapsulationMeta":0,"componentClass":"DotBinaryFileComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"reset","tags":[],"documentation":"Reset properties of the field, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"clearValue":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"clearValue","tags":[],"documentation":"Clear value of selected file, when the endpoint fails.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"status":{"memberType":16},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"''"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to input field","type":"string","default":"''"}},"placeholder":{"memberType":2,"attribName":"placeholder","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"placeholder","tags":[],"documentation":"(optional) Placeholder specifies a short hint that describes the expected value of the input field","type":"string","default":"'Drop or paste a file or url'"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"required":{"memberType":1,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that be shown when required is set and condition not met","type":"string","default":"'This field is required'"},"watchCallbacks":["requiredMessageWatch"]},"validationMessage":{"memberType":1,"attribName":"validation-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"validationMessage","tags":[],"documentation":"(optional) Text that be shown when the Regular Expression condition not met","type":"string","default":"\"The field doesn't comply with the specified format\""},"watchCallbacks":["validationMessageWatch"]},"URLValidationMessage":{"memberType":1,"attribName":"u-r-l-validation-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"URLValidationMessage","tags":[],"documentation":"(optional) Text that be shown when the URL is not valid","type":"string","default":"'The specified URL is not valid'"},"watchCallbacks":["URLValidationMessageWatch"]},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"accept":{"memberType":2,"attribName":"accept","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"accept","tags":[],"documentation":"(optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg","type":"string","default":"''"},"watchCallbacks":["optionsWatch"]},"maxFileLength":{"memberType":2,"attribName":"max-file-length","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"maxFileLength","tags":[],"documentation":"(optional) Set the max file size limit","type":"string","default":"''"}},"buttonLabel":{"memberType":1,"attribName":"button-label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"buttonLabel","tags":[],"documentation":"(optional) Text that be shown in the browse file button","type":"string","default":"'Browse'"}},"errorMessage":{"memberType":2,"attribName":"error-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"errorMessage","tags":[],"documentation":"(optional) Text that be shown in the browse file button","type":"string","default":"''"}},"previewImageName":{"memberType":2,"attribName":"preview-image-name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"previewImageName","tags":[],"documentation":"(optional) Name of the file uploaded","type":"string","default":"''"}},"previewImageUrl":{"memberType":2,"attribName":"preview-image-url","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"previewImageUrl","tags":[],"documentation":"(optional) URL of the file uploaded","type":"string","default":"''"}}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[{"eventName":"fileChange","eventMethodName":"fileChangeHandler","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"fileChangeHandler","tags":[],"documentation":"","type":"(event: CustomEvent<any>) => void"}},{"eventName":"dragover","eventMethodName":"HandleDragover","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"HandleDragover","tags":[],"documentation":"","type":"(evt: DragEvent) => void"}},{"eventName":"dragleave","eventMethodName":"HandleDragleave","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"HandleDragleave","tags":[],"documentation":"","type":"(evt: DragEvent) => void"}},{"eventName":"drop","eventMethodName":"HandleDrop","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"HandleDrop","tags":[],"documentation":"","type":"(evt: DragEvent) => void"}},{"eventName":"delete","eventMethodName":"handleDelete","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"handleDelete","tags":[],"documentation":"","type":"(evt: CustomEvent<any>) => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-binary-file/dot-binary-file.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { DotBinaryMessageError } from '../../models';\r\nimport { checkProp, getClassNames, getOriginalStatus, getTagError, getTagHint, isFileAllowed, updateStatus } from '../../utils';\r\nimport { getDotAttributesFromElement, setDotAttributesToElement } from '../dot-form/utils';\r\nexport class DotBinaryFileComponent {\r\n    constructor() {\r\n        this.name = '';\r\n        this.label = '';\r\n        this.placeholder = 'Drop or paste a file or url';\r\n        this.hint = '';\r\n        this.required = false;\r\n        this.requiredMessage = 'This field is required';\r\n        this.validationMessage = \"The field doesn't comply with the specified format\";\r\n        this.URLValidationMessage = 'The specified URL is not valid';\r\n        this.disabled = false;\r\n        this.accept = '';\r\n        this.maxFileLength = '';\r\n        this.buttonLabel = 'Browse';\r\n        this.errorMessage = '';\r\n        this.previewImageName = '';\r\n        this.previewImageUrl = '';\r\n        this.file = null;\r\n        this.allowedFileTypes = [];\r\n        this.errorMessageMap = new Map();\r\n    }\r\n    reset() {\r\n        this.file = '';\r\n        this.binaryTextField.value = '';\r\n        this.errorMessage = '';\r\n        this.clearPreviewData();\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitStatusChange();\r\n        this.emitValueChange();\r\n    }\r\n    clearValue() {\r\n        this.binaryTextField.value = '';\r\n        this.errorType = this.required ? DotBinaryMessageError.REQUIRED : null;\r\n        this.setValue('');\r\n        this.clearPreviewData();\r\n    }\r\n    componentWillLoad() {\r\n        this.setErrorMessageMap();\r\n        this.validateProps();\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitStatusChange();\r\n    }\r\n    componentDidLoad() {\r\n        this.binaryTextField = this.el.querySelector('dot-binary-text-field');\r\n        const attrException = ['dottype'];\r\n        const uploadButtonElement = this.el.querySelector('input[type=\"file\"]');\r\n        setTimeout(() => {\r\n            const attrs = getDotAttributesFromElement(Array.from(this.el.attributes), attrException);\r\n            setDotAttributesToElement(uploadButtonElement, attrs);\r\n        }, 0);\r\n    }\r\n    requiredMessageWatch() {\r\n        this.errorMessageMap.set(DotBinaryMessageError.REQUIRED, this.requiredMessage);\r\n    }\r\n    validationMessageWatch() {\r\n        this.errorMessageMap.set(DotBinaryMessageError.INVALID, this.validationMessage);\r\n    }\r\n    URLValidationMessageWatch() {\r\n        this.errorMessageMap.set(DotBinaryMessageError.URLINVALID, this.URLValidationMessage);\r\n    }\r\n    optionsWatch() {\r\n        this.accept = checkProp(this, 'accept');\r\n        this.allowedFileTypes = !!this.accept ? this.accept.split(',') : [];\r\n        this.allowedFileTypes = this.allowedFileTypes.map((fileType) => fileType.trim());\r\n    }\r\n    fileChangeHandler(event) {\r\n        event.stopImmediatePropagation();\r\n        const fileEvent = event.detail;\r\n        this.errorType = fileEvent.errorType;\r\n        this.setValue(fileEvent.file);\r\n        if (this.isBinaryUploadButtonEvent(event.target) && fileEvent.file) {\r\n            this.binaryTextField.value = fileEvent.file.name;\r\n        }\r\n    }\r\n    HandleDragover(evt) {\r\n        evt.preventDefault();\r\n        if (!this.disabled) {\r\n            this.el.classList.add('dot-dragover');\r\n            this.el.classList.remove('dot-dropped');\r\n        }\r\n    }\r\n    HandleDragleave(evt) {\r\n        evt.preventDefault();\r\n        this.el.classList.remove('dot-dragover');\r\n        this.el.classList.remove('dot-dropped');\r\n    }\r\n    HandleDrop(evt) {\r\n        evt.preventDefault();\r\n        this.el.classList.remove('dot-dragover');\r\n        if (!this.disabled && !this.previewImageName) {\r\n            this.el.classList.add('dot-dropped');\r\n            this.errorType = null;\r\n            const droppedFile = evt.dataTransfer.files[0];\r\n            this.handleDroppedFile(droppedFile);\r\n        }\r\n    }\r\n    handleDelete(evt) {\r\n        evt.preventDefault();\r\n        this.setValue('');\r\n        this.clearPreviewData();\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: getClassNames(this.status, this.isValid(), this.required)\r\n        };\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { label: this.label, required: this.required, name: this.name, tabindex: \"0\" }, this.previewImageName ? (h(\"dot-binary-file-preview\", { onClick: (e) => {\r\n                    e.preventDefault();\r\n                }, fileName: this.previewImageName, previewUrl: this.previewImageUrl })) : (h(\"div\", { class: \"dot-binary__container\" },\r\n                h(\"dot-binary-text-field\", { placeholder: this.placeholder, required: this.required, disabled: this.disabled, accept: this.allowedFileTypes.join(','), hint: this.hint, onLostFocus: this.lostFocusEventHandler.bind(this) }),\r\n                h(\"dot-binary-upload-button\", { name: this.name, accept: this.allowedFileTypes.join(','), disabled: this.disabled, required: this.required, buttonLabel: this.buttonLabel })))),\r\n            getTagHint(this.hint),\r\n            getTagError(this.shouldShowErrorMessage(), this.getErrorMessage()),\r\n            h(\"dot-error-message\", null, this.errorMessage)));\r\n    }\r\n    lostFocusEventHandler() {\r\n        if (!this.status.dotTouched) {\r\n            this.status = updateStatus(this.status, {\r\n                dotTouched: true\r\n            });\r\n            this.emitStatusChange();\r\n        }\r\n    }\r\n    isBinaryUploadButtonEvent(element) {\r\n        return element.localName === 'dot-binary-upload-button';\r\n    }\r\n    validateProps() {\r\n        this.optionsWatch();\r\n        this.setPlaceHolder();\r\n    }\r\n    shouldShowErrorMessage() {\r\n        return this.getErrorMessage() && !this.status.dotPristine;\r\n    }\r\n    getErrorMessage() {\r\n        return this.errorMessageMap.get(this.errorType);\r\n    }\r\n    isValid() {\r\n        return !(this.required && !this.file);\r\n    }\r\n    setErrorMessageMap() {\r\n        this.requiredMessageWatch();\r\n        this.validationMessageWatch();\r\n        this.URLValidationMessageWatch();\r\n    }\r\n    setValue(data) {\r\n        this.file = data;\r\n        this.status = updateStatus(this.status, {\r\n            dotTouched: true,\r\n            dotPristine: false,\r\n            dotValid: this.isValid()\r\n        });\r\n        this.binaryTextField.value = data === null ? '' : this.binaryTextField.value;\r\n        this.emitValueChange();\r\n        this.emitStatusChange();\r\n    }\r\n    emitStatusChange() {\r\n        this.statusChange.emit({\r\n            name: this.name,\r\n            status: this.status\r\n        });\r\n    }\r\n    emitValueChange() {\r\n        this.valueChange.emit({\r\n            name: this.name,\r\n            value: this.file\r\n        });\r\n    }\r\n    handleDroppedFile(file) {\r\n        if (isFileAllowed(file.name, this.allowedFileTypes.join(','))) {\r\n            this.setValue(file);\r\n            this.binaryTextField.value = file.name;\r\n        }\r\n        else {\r\n            this.errorType = DotBinaryMessageError.INVALID;\r\n            this.setValue(null);\r\n        }\r\n    }\r\n    setPlaceHolder() {\r\n        const DEFAULT_WINDOWS = 'Drop a file or url';\r\n        this.placeholder = this.isWindowsOS() ? DEFAULT_WINDOWS : this.placeholder;\r\n    }\r\n    isWindowsOS() {\r\n        return window.navigator.platform.includes('Win');\r\n    }\r\n    clearPreviewData() {\r\n        this.previewImageUrl = '';\r\n        this.previewImageName = '';\r\n    }\r\n    static get is() { return \"dot-binary-file\"; }\r\n    static get properties() { return {\r\n        \"accept\": {\r\n            \"type\": String,\r\n            \"attr\": \"accept\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"optionsWatch\"]\r\n        },\r\n        \"buttonLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"button-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"clearValue\": {\r\n            \"method\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"errorMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"error-message\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"maxFileLength\": {\r\n            \"type\": String,\r\n            \"attr\": \"max-file-length\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"placeholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"placeholder\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"previewImageName\": {\r\n            \"type\": String,\r\n            \"attr\": \"preview-image-name\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"previewImageUrl\": {\r\n            \"type\": String,\r\n            \"attr\": \"preview-image-url\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"watchCallbacks\": [\"requiredMessageWatch\"]\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"URLValidationMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"u-r-l-validation-message\",\r\n            \"watchCallbacks\": [\"URLValidationMessageWatch\"]\r\n        },\r\n        \"validationMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"validation-message\",\r\n            \"watchCallbacks\": [\"validationMessageWatch\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"fileChange\",\r\n            \"method\": \"fileChangeHandler\"\r\n        }, {\r\n            \"name\": \"dragover\",\r\n            \"method\": \"HandleDragover\"\r\n        }, {\r\n            \"name\": \"dragleave\",\r\n            \"method\": \"HandleDragleave\"\r\n        }, {\r\n            \"name\": \"drop\",\r\n            \"method\": \"HandleDrop\"\r\n        }, {\r\n            \"name\": \"delete\",\r\n            \"method\": \"handleDelete\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-binary-file:**/\"; }\r\n}\r\n"}