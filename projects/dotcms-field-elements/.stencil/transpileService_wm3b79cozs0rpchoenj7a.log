{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-key-value/dot-key-value.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-label"},{"tag":"key-value-form"},{"tag":"key-value-table"}],"cmpMeta":{"tagNameMeta":"dot-key-value","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-key-value/dot-key-value.scss","cmpRelativePath":"dot-key-value.scss","originalComponentPath":"dot-key-value.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotKeyValueComponent","tags":[],"documentation":"","type":"typeof DotKeyValueComponent"},"encapsulationMeta":0,"componentClass":"DotKeyValueComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"reset","tags":[],"documentation":"Reset properties of the field, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"status":{"memberType":16},"items":{"memberType":16},"formKeyPlaceholder":{"memberType":1,"attribName":"form-key-placeholder","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"formKeyPlaceholder","tags":[],"documentation":"(optional) Placeholder for the key input text in the <key-value-form>","type":"string"}},"formValuePlaceholder":{"memberType":1,"attribName":"form-value-placeholder","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"formValuePlaceholder","tags":[],"documentation":"(optional) Placeholder for the value input text in the <key-value-form>","type":"string"}},"formKeyLabel":{"memberType":1,"attribName":"form-key-label","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"formKeyLabel","tags":[],"documentation":"(optional) The string to use in the key label in the <key-value-form>","type":"string"}},"formValueLabel":{"memberType":1,"attribName":"form-value-label","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"formValueLabel","tags":[],"documentation":"(optional) The string to use in the value label in the <key-value-form>","type":"string"}},"formAddButtonLabel":{"memberType":1,"attribName":"form-add-button-label","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"formAddButtonLabel","tags":[],"documentation":"(optional) Label for the add button in the <key-value-form>","type":"string"}},"listDeleteLabel":{"memberType":1,"attribName":"list-delete-label","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"listDeleteLabel","tags":[],"documentation":"(optional) The string to use in the delete button of a key/value item","type":"string"}},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to input field","type":"string","default":"''"}},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"''"}},"required":{"memberType":1,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that will be shown when required is set and condition is not met","type":"string","default":"'This field is required'"}},"value":{"memberType":2,"attribName":"value","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"value","tags":[],"documentation":"Value of the field","type":"string","default":"''"},"watchCallbacks":["valueWatch"]}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[{"eventName":"delete","eventMethodName":"deleteItemHandler","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"deleteItemHandler","tags":[],"documentation":"","type":"(event: CustomEvent<number>) => void"}},{"eventName":"add","eventMethodName":"addItemHandler","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"addItemHandler","tags":[],"documentation":"","type":"({ detail }: CustomEvent<DotKeyValueField>) => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-key-value/dot-key-value.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { checkProp, getClassNames, getDotOptionsFromFieldValue, getOriginalStatus, getStringFromDotKeyArray, getTagError, getTagHint, updateStatus, getHintId } from '../../utils';\r\nconst mapToKeyValue = ({ label, value }) => {\r\n    return {\r\n        key: label,\r\n        value\r\n    };\r\n};\r\nexport class DotKeyValueComponent {\r\n    constructor() {\r\n        this.disabled = false;\r\n        this.hint = '';\r\n        this.label = '';\r\n        this.name = '';\r\n        this.required = false;\r\n        this.requiredMessage = 'This field is required';\r\n        this.value = '';\r\n        this.items = [];\r\n    }\r\n    valueWatch() {\r\n        this.value = checkProp(this, 'value', 'string');\r\n        this.items = getDotOptionsFromFieldValue(this.value).map(mapToKeyValue);\r\n    }\r\n    reset() {\r\n        this.items = [];\r\n        this.value = '';\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitChanges();\r\n    }\r\n    deleteItemHandler(event) {\r\n        event.stopImmediatePropagation();\r\n        this.items = this.items.filter((_item, index) => index !== event.detail);\r\n        this.refreshStatus();\r\n        this.emitChanges();\r\n    }\r\n    addItemHandler({ detail }) {\r\n        this.items = [...this.items, detail];\r\n        this.refreshStatus();\r\n        this.emitChanges();\r\n    }\r\n    componentWillLoad() {\r\n        this.validateProps();\r\n        this.setOriginalStatus();\r\n        this.emitStatusChange();\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: getClassNames(this.status, this.isValid(), this.required)\r\n        };\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { \"aria-describedby\": getHintId(this.hint), tabIndex: this.hint ? 0 : null, label: this.label, required: this.required, name: this.name },\r\n                h(\"key-value-form\", { onLostFocus: this.blurHandler.bind(this), \"add-button-label\": this.formAddButtonLabel, disabled: this.isDisabled(), \"key-label\": this.formKeyLabel, \"key-placeholder\": this.formKeyPlaceholder, \"value-label\": this.formValueLabel, \"value-placeholder\": this.formValuePlaceholder }),\r\n                h(\"key-value-table\", { onClick: (e) => {\r\n                        e.preventDefault();\r\n                    }, \"button-label\": this.listDeleteLabel, disabled: this.isDisabled(), items: this.items })),\r\n            getTagHint(this.hint),\r\n            getTagError(this.showErrorMessage(), this.getErrorMessage())));\r\n    }\r\n    isDisabled() {\r\n        return this.disabled || null;\r\n    }\r\n    blurHandler() {\r\n        if (!this.status.dotTouched) {\r\n            this.status = updateStatus(this.status, {\r\n                dotTouched: true\r\n            });\r\n            this.emitStatusChange();\r\n        }\r\n    }\r\n    validateProps() {\r\n        this.valueWatch();\r\n    }\r\n    setOriginalStatus() {\r\n        this.status = getOriginalStatus(this.isValid());\r\n    }\r\n    isValid() {\r\n        return !(this.required && !this.items.length);\r\n    }\r\n    showErrorMessage() {\r\n        return this.getErrorMessage() && !this.status.dotPristine;\r\n    }\r\n    getErrorMessage() {\r\n        return this.isValid() ? '' : this.requiredMessage;\r\n    }\r\n    refreshStatus() {\r\n        this.status = updateStatus(this.status, {\r\n            dotTouched: true,\r\n            dotPristine: false,\r\n            dotValid: this.isValid()\r\n        });\r\n    }\r\n    emitStatusChange() {\r\n        this.statusChange.emit({\r\n            name: this.name,\r\n            status: this.status\r\n        });\r\n    }\r\n    emitValueChange() {\r\n        const returnedValue = getStringFromDotKeyArray(this.items);\r\n        this.valueChange.emit({\r\n            name: this.name,\r\n            value: returnedValue\r\n        });\r\n    }\r\n    emitChanges() {\r\n        this.emitStatusChange();\r\n        this.emitValueChange();\r\n    }\r\n    static get is() { return \"dot-key-value\"; }\r\n    static get properties() { return {\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"formAddButtonLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"form-add-button-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"formKeyLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"form-key-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"formKeyPlaceholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"form-key-placeholder\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"formValueLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"form-value-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"formValuePlaceholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"form-value-placeholder\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"items\": {\r\n            \"state\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"listDeleteLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"list-delete-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"valueWatch\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"delete\",\r\n            \"method\": \"deleteItemHandler\"\r\n        }, {\r\n            \"name\": \"add\",\r\n            \"method\": \"addItemHandler\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-key-value:**/\"; }\r\n}\r\n"}