{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-tags/dot-tags.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-label"},{"tag":"dot-autocomplete"},{"tag":"dot-chip"}],"cmpMeta":{"tagNameMeta":"dot-tags","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-tags/dot-tags.scss","cmpRelativePath":"dot-tags.scss","originalComponentPath":"dot-tags.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotTagsComponent","tags":[],"documentation":"","type":"typeof DotTagsComponent"},"encapsulationMeta":0,"componentClass":"DotTagsComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"reset","tags":[],"documentation":"Reset properties of the filed, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"status":{"memberType":16},"value":{"memberType":2,"attribName":"value","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"value","tags":[],"documentation":"Value formatted splitted with a comma, for example: tag-1,tag-2","type":"string","default":"''"},"watchCallbacks":["valueWatch"]},"data":{"memberType":1,"attribName":"data","attribType":{"text":"() => Promise<string[]> | string[]","required":false,"optional":false,"typeReferences":{"Promise":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"data","tags":[],"documentation":"Function or array of string to get the data to use for the autocomplete search","type":"() => string[] | Promise<string[]>","default":"null"}},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"''"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to input field","type":"string","default":"''"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"placeholder":{"memberType":1,"attribName":"placeholder","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"placeholder","tags":[],"documentation":"(optional) text to show when no value is set","type":"string","default":"''"}},"required":{"memberType":1,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that be shown when required is set and value is not set","type":"string","default":"'This field is required'"}},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"threshold":{"memberType":1,"attribName":"threshold","attribType":{"text":"number","required":false,"optional":false},"reflectToAttrib":true,"propType":8,"jsdoc":{"name":"threshold","tags":[],"documentation":"Min characters to start search in the autocomplete input","type":"number","default":"0"}},"debounce":{"memberType":1,"attribName":"debounce","attribType":{"text":"number","required":false,"optional":false},"reflectToAttrib":true,"propType":8,"jsdoc":{"name":"debounce","tags":[],"documentation":"Duraction in ms to start search into the autocomplete","type":"number","default":"300"}}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-tags/dot-tags.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { checkProp, getClassNames, getErrorClass, getOriginalStatus, getTagError, getTagHint, updateStatus, getHintId, isStringType } from '../../utils';\r\nexport class DotTagsComponent {\r\n    constructor() {\r\n        this.value = '';\r\n        this.data = null;\r\n        this.name = '';\r\n        this.label = '';\r\n        this.hint = '';\r\n        this.placeholder = '';\r\n        this.required = false;\r\n        this.requiredMessage = 'This field is required';\r\n        this.disabled = false;\r\n        this.threshold = 0;\r\n        this.debounce = 300;\r\n    }\r\n    reset() {\r\n        this.value = '';\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitChanges();\r\n    }\r\n    valueWatch() {\r\n        this.value = checkProp(this, 'value', 'string');\r\n    }\r\n    componentWillLoad() {\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.validateProps();\r\n        this.emitStatusChange();\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: getClassNames(this.status, this.isValid(), this.required)\r\n        };\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { label: this.label, required: this.required, name: this.name },\r\n                h(\"div\", { \"aria-describedby\": getHintId(this.hint), tabIndex: this.hint ? 0 : null, class: \"dot-tags__container\" },\r\n                    h(\"dot-autocomplete\", { class: getErrorClass(this.status.dotValid), data: this.data, debounce: this.debounce, disabled: this.isDisabled(), onEnter: this.onEnterHandler.bind(this), onLostFocus: this.blurHandler.bind(this), onSelection: this.onSelectHandler.bind(this), placeholder: this.placeholder || null, threshold: this.threshold }),\r\n                    h(\"div\", { class: \"dot-tags__chips\" }, this.getValues().map((tagLab) => (h(\"dot-chip\", { disabled: this.isDisabled(), label: tagLab, onRemove: this.removeTag.bind(this) })))))),\r\n            getTagHint(this.hint),\r\n            getTagError(this.showErrorMessage(), this.getErrorMessage())));\r\n    }\r\n    addTag(label) {\r\n        const values = this.getValues();\r\n        if (!values.includes(label)) {\r\n            values.push(label);\r\n            this.value = values.join(',');\r\n            this.updateStatus();\r\n            this.emitChanges();\r\n        }\r\n    }\r\n    blurHandler() {\r\n        if (!this.status.dotTouched) {\r\n            this.status = updateStatus(this.status, {\r\n                dotTouched: true\r\n            });\r\n            this.emitStatusChange();\r\n        }\r\n    }\r\n    emitChanges() {\r\n        this.emitStatusChange();\r\n        this.emitValueChange();\r\n    }\r\n    emitStatusChange() {\r\n        this.statusChange.emit({\r\n            name: this.name,\r\n            status: this.status\r\n        });\r\n    }\r\n    emitValueChange() {\r\n        this.valueChange.emit({\r\n            name: this.name,\r\n            value: this.value\r\n        });\r\n    }\r\n    getErrorMessage() {\r\n        return this.isValid() ? '' : this.requiredMessage;\r\n    }\r\n    getValues() {\r\n        return isStringType(this.value) ? this.value.split(',') : [];\r\n    }\r\n    isDisabled() {\r\n        return this.disabled || null;\r\n    }\r\n    isValid() {\r\n        return !this.required || (this.required && !!this.value);\r\n    }\r\n    onEnterHandler({ detail = '' }) {\r\n        detail.split(',').forEach((label) => {\r\n            this.addTag(label.trim());\r\n        });\r\n    }\r\n    onSelectHandler({ detail = '' }) {\r\n        const value = detail.replace(',', ' ').replace(/\\s+/g, ' ');\r\n        this.addTag(value);\r\n    }\r\n    removeTag(event) {\r\n        const values = this.getValues().filter((item) => item !== event.detail);\r\n        this.value = values.join(',');\r\n        this.updateStatus();\r\n        this.emitChanges();\r\n    }\r\n    showErrorMessage() {\r\n        return this.getErrorMessage() && !this.status.dotPristine;\r\n    }\r\n    updateStatus() {\r\n        this.status = updateStatus(this.status, {\r\n            dotTouched: true,\r\n            dotPristine: false,\r\n            dotValid: this.isValid()\r\n        });\r\n    }\r\n    validateProps() {\r\n        this.valueWatch();\r\n    }\r\n    static get is() { return \"dot-tags\"; }\r\n    static get properties() { return {\r\n        \"data\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"data\"\r\n        },\r\n        \"debounce\": {\r\n            \"type\": Number,\r\n            \"attr\": \"debounce\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"placeholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"placeholder\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"threshold\": {\r\n            \"type\": Number,\r\n            \"attr\": \"threshold\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"valueWatch\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-tags:**/\"; }\r\n}\r\n"}