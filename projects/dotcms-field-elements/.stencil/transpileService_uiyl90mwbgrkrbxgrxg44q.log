{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils/utils.tsx","localImports":[],"externalImports":[],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils/utils.js"},"jsText":"export function getClassNames(status, isValid, required) {\r\n    return {\r\n        'dot-valid': isValid,\r\n        'dot-invalid': !isValid,\r\n        'dot-pristine': status.dotPristine,\r\n        'dot-dirty': !status.dotPristine,\r\n        'dot-touched': status.dotTouched,\r\n        'dot-untouched': !status.dotTouched,\r\n        'dot-required': required\r\n    };\r\n}\r\nexport function isStringType(val) {\r\n    return typeof val === 'string' && !!val;\r\n}\r\nexport function getDotOptionsFromFieldValue(rawString) {\r\n    if (!isStringType(rawString)) {\r\n        return [];\r\n    }\r\n    rawString = rawString.replace(/(?:\\\\[rn]|[\\r\\n]+)+/g, ',');\r\n    const items = isKeyPipeValueFormatValid(rawString)\r\n        ? rawString\r\n            .split(',')\r\n            .filter((item) => !!item.length)\r\n            .map((item) => {\r\n            const [label, value] = item.split('|');\r\n            return { label, value };\r\n        })\r\n        : [];\r\n    return items;\r\n}\r\nexport function getErrorClass(valid) {\r\n    return valid ? undefined : 'dot-field__error';\r\n}\r\nexport function getHintId(name) {\r\n    const value = slugify(name);\r\n    return value ? `hint-${value}` : undefined;\r\n}\r\nexport function getId(name) {\r\n    const value = slugify(name);\r\n    return name ? `dot-${slugify(value)}` : undefined;\r\n}\r\nexport function getLabelId(name) {\r\n    const value = slugify(name);\r\n    return value ? `label-${value}` : undefined;\r\n}\r\nexport function getOriginalStatus(isValid) {\r\n    return {\r\n        dotValid: typeof isValid === 'undefined' ? true : isValid,\r\n        dotTouched: false,\r\n        dotPristine: true\r\n    };\r\n}\r\nexport function getStringFromDotKeyArray(values) {\r\n    return values.map((item) => `${item.key}|${item.value}`).join(',');\r\n}\r\nexport function updateStatus(state, change) {\r\n    return Object.assign({}, state, change);\r\n}\r\nexport function getTagError(show, message) {\r\n    return show && isStringType(message) ? (h(\"span\", { class: \"dot-field__error-message\" }, message)) : null;\r\n}\r\nexport function getTagHint(hint) {\r\n    return isStringType(hint) ? (h(\"span\", { class: \"dot-field__hint\", id: getHintId(hint) }, hint)) : null;\r\n}\r\nexport function isValidURL(url) {\r\n    try {\r\n        return !!new URL(url);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\nexport function isFileAllowed(fileName, allowedExtensions) {\r\n    let allowedExtensionsArray = allowedExtensions.split(',');\r\n    allowedExtensionsArray = allowedExtensionsArray.map((item) => item.trim());\r\n    const extension = fileName ? fileName.substring(fileName.indexOf('.'), fileName.length) : '';\r\n    return allowAnyFile(allowedExtensionsArray) || allowedExtensionsArray.includes(extension);\r\n}\r\nfunction allowAnyFile(allowedExtensions) {\r\n    return allowedExtensions[0] === '' || allowedExtensions.includes('*');\r\n}\r\nfunction slugify(text) {\r\n    return text\r\n        ? text\r\n            .toString()\r\n            .toLowerCase()\r\n            .replace(/\\s+/g, '-')\r\n            .replace(/[^\\w\\-]+/g, '')\r\n            .replace(/\\-\\-+/g, '-')\r\n            .replace(/^-+/, '')\r\n            .replace(/-+$/, '')\r\n        : null;\r\n}\r\nfunction isKeyPipeValueFormatValid(rawString) {\r\n    const regex = /([^|,]*)\\|([^|,]*)/;\r\n    const items = rawString.split(',');\r\n    let valid = true;\r\n    for (let i = 0, total = items.length; i < total; i++) {\r\n        if (!regex.test(items[i])) {\r\n            valid = false;\r\n            break;\r\n        }\r\n    }\r\n    return valid;\r\n}\r\n"}