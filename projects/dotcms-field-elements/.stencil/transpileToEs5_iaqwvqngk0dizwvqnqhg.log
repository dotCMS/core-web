var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
dotcmsFields.loadBundle('/**:bundle-id:**/', ['exports', './chunk-35cb6fec.js', './chunk-42b2163a.js', './chunk-01704cfd.js'], function (exports, __chunk_1, __chunk_2, __chunk_3) {
    var h = window.dotcmsFields.h;
    var DotUploadService = /** @class */ (function () {
        function DotUploadService() {
        }
        DotUploadService.prototype.uploadFile = function (file, maxSize) {
            if (typeof file === 'string') {
                return this.uploadFileByURL(file);
            }
            else {
                return this.uploadBinaryFile(file, maxSize);
            }
        };
        DotUploadService.prototype.uploadFileByURL = function (url) {
            var _this = this;
            var UPLOAD_FILE_FROM_URL = '/api/v1/temp/byUrl';
            return fetch(UPLOAD_FILE_FROM_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Origin: window.location.hostname
                },
                body: JSON.stringify({
                    remoteUrl: url
                })
            }).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                var error, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(response.status === 200)) return [3 /*break*/, 2];
                            return [4 /*yield*/, response.json()];
                        case 1: return [2 /*return*/, (_b.sent()).tempFiles[0]];
                        case 2:
                            _a = {};
                            return [4 /*yield*/, response.json()];
                        case 3:
                            error = (_a.message = (_b.sent()).message,
                                _a.status = response.status,
                                _a);
                            throw error;
                    }
                });
            }); });
        };
        DotUploadService.prototype.uploadBinaryFile = function (file, maxSize) {
            var _this = this;
            var path = "/api/v1/temp";
            path += maxSize ? "?maxFileLength=" + maxSize : '';
            var formData = new FormData();
            formData.append('file', file);
            return fetch(path, {
                method: 'POST',
                headers: {
                    Origin: window.location.hostname
                },
                body: formData
            }).then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                var error, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(response.status === 200)) return [3 /*break*/, 2];
                            return [4 /*yield*/, response.json()];
                        case 1: return [2 /*return*/, (_b.sent()).tempFiles[0]];
                        case 2:
                            _a = {};
                            return [4 /*yield*/, response.json()];
                        case 3:
                            error = (_a.message = (_b.sent()).message,
                                _a.status = response.status,
                                _a);
                            throw error;
                    }
                });
            }); });
        };
        return DotUploadService;
    }());
    var SUBMIT_FORM_API_URL = '/api/v1/workflow/actions/default/fire/NEW';
    var fallbackErrorMessages = {
        500: '500 Internal Server Error',
        400: '400 Bad Request',
        401: '401 Unauthorized Error'
    };
    var DotFormComponent = /** @class */ (function () {
        function DotFormComponent() {
            this.resetLabel = 'Reset';
            this.submitLabel = 'Submit';
            this.layout = [];
            this.variable = '';
            this.status = __chunk_2.getOriginalStatus();
            this.errorMessage = '';
            this.uploadFileInProgress = false;
            this.fieldsStatus = {};
            this.value = {};
        }
        DotFormComponent.prototype.onValueChange = function (event) {
            var _this = this;
            var tagName = event.target.tagName;
            var _a = event.detail, name = _a.name, value = _a.value;
            var process = __chunk_3.fieldCustomProcess[tagName];
            if (tagName === 'DOT-BINARY-FILE' && value) {
                this.uploadFile(event).then(function (tempFile) {
                    _this.value[name] = tempFile && tempFile.id;
                });
            }
            else {
                this.value[name] = process ? process(value) : value;
            }
        };
        DotFormComponent.prototype.onStatusChange = function (_a) {
            var detail = _a.detail;
            this.fieldsStatus[detail.name] = detail.status;
            this.status = __chunk_2.updateStatus(this.status, {
                dotTouched: this.getTouched(),
                dotPristine: this.getStatusValueByName('dotPristine'),
                dotValid: this.getStatusValueByName('dotValid')
            });
        };
        DotFormComponent.prototype.layoutWatch = function () {
            this.value = this.getUpdateValue();
        };
        DotFormComponent.prototype.fieldsToShowWatch = function () {
            this.value = this.getUpdateValue();
        };
        DotFormComponent.prototype.hostData = function () {
            return {
                class: __chunk_2.getClassNames(this.status, this.status.dotValid)
            };
        };
        DotFormComponent.prototype.componentWillLoad = function () {
            this.value = this.getUpdateValue();
        };
        DotFormComponent.prototype.render = function () {
            var _this = this;
            return (h(__chunk_1.Fragment, null, h("form", { onSubmit: this.handleSubmit.bind(this) }, this.layout.map(function (row) { return (h("dot-form-row", { row: row, "fields-to-show": _this.fieldsToShow })); }), h("div", { class: "dot-form__buttons" }, h("button", { type: "reset", onClick: function () { return _this.resetForm(); } }, this.resetLabel), h("button", { type: "submit", disabled: !this.status.dotValid || this.uploadFileInProgress }, this.submitLabel))), h("dot-error-message", null, this.errorMessage)));
        };
        DotFormComponent.prototype.getStatusValueByName = function (name) {
            return Object.values(this.fieldsStatus)
                .map(function (field) { return field[name]; })
                .every(function (item) { return item === true; });
        };
        DotFormComponent.prototype.getTouched = function () {
            return Object.values(this.fieldsStatus)
                .map(function (field) { return field.dotTouched; })
                .includes(true);
        };
        DotFormComponent.prototype.handleSubmit = function (event) {
            var _this = this;
            event.preventDefault();
            fetch(SUBMIT_FORM_API_URL, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    contentlet: Object.assign({ contentType: this.variable }, this.value)
                })
            })
                .then(function (response) { return __awaiter(_this, void 0, void 0, function () {
                var error, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(response.status !== 200)) return [3 /*break*/, 2];
                            _a = {};
                            return [4 /*yield*/, response.text()];
                        case 1:
                            error = (_a.message = _b.sent(),
                                _a.status = response.status,
                                _a);
                            throw error;
                        case 2: return [2 /*return*/, response.json()];
                    }
                });
            }); })
                .then(function (jsonResponse) {
                var contentlet = jsonResponse.entity;
                _this.runSuccessCallback(contentlet);
            })
                .catch(function (_a) {
                var message = _a.message, status = _a.status;
                _this.errorMessage = __chunk_3.getErrorMessage(message) || fallbackErrorMessages[status];
            });
        };
        DotFormComponent.prototype.runSuccessCallback = function (contentlet) {
            var successCallback = this.getSuccessCallback();
            if (successCallback) {
                return function () {
                    return eval(successCallback);
                }.call({ contentlet: contentlet });
            }
        };
        DotFormComponent.prototype.getSuccessCallback = function () {
            var successCallback = __chunk_3.getFieldsFromLayout(this.layout).filter(function (field) { return field.variable === 'formSuccessCallback'; })[0];
            return successCallback.values;
        };
        DotFormComponent.prototype.resetForm = function () {
            var elements = Array.from(this.el.querySelectorAll('form dot-form-column > *'));
            elements.forEach(function (element) {
                try {
                    element.reset();
                }
                catch (error) {
                    console.warn("" + element.tagName, error);
                }
            });
        };
        DotFormComponent.prototype.getUpdateValue = function () {
            return __chunk_3.getFieldsFromLayout(this.layout)
                .filter(function (field) { return field.fixed === false; })
                .reduce(function (acc, _a) {
                var variable = _a.variable, defaultValue = _a.defaultValue, dataType = _a.dataType, values = _a.values;
                var _b;
                return Object.assign({}, acc, (_b = {}, _b[variable] = defaultValue || (dataType !== 'TEXT' ? values : null), _b));
            }, {});
        };
        DotFormComponent.prototype.getMaxSize = function (event) {
            var attributes = event.target.attributes.slice();
            var maxSize = attributes.filter(function (item) {
                return item.name === 'max-file-length';
            })[0];
            return maxSize && maxSize.value;
        };
        DotFormComponent.prototype.uploadFile = function (event) {
            var _this = this;
            var uploadService = new DotUploadService();
            var file = event.detail.value;
            var maxSize = this.getMaxSize(event);
            var binary = event.target;
            if (!maxSize || file.size <= maxSize) {
                this.uploadFileInProgress = true;
                binary.errorMessage = '';
                return uploadService
                    .uploadFile(file, maxSize)
                    .then(function (tempFile) {
                    _this.errorMessage = '';
                    binary.previewImageUrl = tempFile.thumbnailUrl;
                    binary.previewImageName = tempFile.fileName;
                    _this.uploadFileInProgress = false;
                    return tempFile;
                })
                    .catch(function (_a) {
                    var message = _a.message, status = _a.status;
                    binary.clearValue();
                    _this.uploadFileInProgress = false;
                    _this.errorMessage = __chunk_3.getErrorMessage(message) || fallbackErrorMessages[status];
                    return null;
                });
            }
            else {
                binary.reset();
                binary.errorMessage = "File size larger than allowed " + maxSize + " bytes";
                return Promise.resolve(null);
            }
        };
        Object.defineProperty(DotFormComponent, "is", {
            get: function () { return "dot-form"; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DotFormComponent, "properties", {
            get: function () {
                return {
                    "el": {
                        "elementRef": true
                    },
                    "errorMessage": {
                        "state": true
                    },
                    "fieldsToShow": {
                        "type": String,
                        "attr": "fields-to-show",
                        "watchCallbacks": ["fieldsToShowWatch"]
                    },
                    "layout": {
                        "type": "Any",
                        "attr": "layout",
                        "reflectToAttr": true,
                        "watchCallbacks": ["layoutWatch"]
                    },
                    "resetLabel": {
                        "type": String,
                        "attr": "reset-label",
                        "reflectToAttr": true
                    },
                    "status": {
                        "state": true
                    },
                    "submitLabel": {
                        "type": String,
                        "attr": "submit-label",
                        "reflectToAttr": true
                    },
                    "uploadFileInProgress": {
                        "state": true
                    },
                    "variable": {
                        "type": String,
                        "attr": "variable",
                        "reflectToAttr": true
                    }
                };
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DotFormComponent, "listeners", {
            get: function () {
                return [{
                        "name": "valueChange",
                        "method": "onValueChange"
                    }, {
                        "name": "statusChange",
                        "method": "onStatusChange"
                    }];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DotFormComponent, "style", {
            get: function () { return "/**style-placeholder:dot-form:**/"; },
            enumerable: true,
            configurable: true
        });
        return DotFormComponent;
    }());
    exports.DotForm = DotFormComponent;
    Object.defineProperty(exports, '__esModule', { value: true });
});
