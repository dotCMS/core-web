{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils/props/validators/props.ts","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils/props/DotFieldPropError","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils/props/validators/date"],"externalImports":[],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils/props/validators/props.js"},"jsText":"import DotFieldPropError from '../DotFieldPropError';\r\nimport { dotValidateDate, dotValidateTime, dotParseDate, isValidDateSlot } from './date';\r\nexport function stringValidator(propInfo) {\r\n    if (typeof propInfo.value !== 'string') {\r\n        throw new DotFieldPropError(propInfo, 'string');\r\n    }\r\n}\r\nexport function regexValidator(propInfo) {\r\n    try {\r\n        RegExp(propInfo.value.toString());\r\n    }\r\n    catch (e) {\r\n        throw new DotFieldPropError(propInfo, 'valid regular expression');\r\n    }\r\n}\r\nexport function numberValidator(propInfo) {\r\n    if (isNaN(Number(propInfo.value))) {\r\n        throw new DotFieldPropError(propInfo, 'Number');\r\n    }\r\n}\r\nexport function dateValidator(propInfo) {\r\n    if (!dotValidateDate(propInfo.value.toString())) {\r\n        throw new DotFieldPropError(propInfo, 'Date');\r\n    }\r\n}\r\nconst areRangeDatesValid = (start, end, propInfo) => {\r\n    if (start > end) {\r\n        throw new DotFieldPropError(propInfo, 'Date');\r\n    }\r\n};\r\nexport function dateRangeValidator(propInfo) {\r\n    const [start, end] = propInfo.value.toString().split(',');\r\n    if (!dotValidateDate(start) || !dotValidateDate(end)) {\r\n        throw new DotFieldPropError(propInfo, 'Date');\r\n    }\r\n    areRangeDatesValid(new Date(start), new Date(end), propInfo);\r\n}\r\nexport function timeValidator(propInfo) {\r\n    if (!dotValidateTime(propInfo.value.toString())) {\r\n        throw new DotFieldPropError(propInfo, 'Time');\r\n    }\r\n}\r\nexport function dateTimeValidator(propInfo) {\r\n    if (typeof propInfo.value === 'string') {\r\n        const dateSlot = dotParseDate(propInfo.value);\r\n        if (!isValidDateSlot(dateSlot, propInfo.value)) {\r\n            throw new DotFieldPropError(propInfo, 'Date/Time');\r\n        }\r\n    }\r\n    else {\r\n        throw new DotFieldPropError(propInfo, 'Date/Time');\r\n    }\r\n}\r\n"}