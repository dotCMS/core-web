{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date/dot-date.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-label"},{"tag":"dot-input-calendar"}],"cmpMeta":{"tagNameMeta":"dot-date","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date/dot-date.scss","cmpRelativePath":"dot-date.scss","originalComponentPath":"dot-date.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotDateComponent","tags":[],"documentation":"","type":"typeof DotDateComponent"},"encapsulationMeta":0,"componentClass":"DotDateComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"reset","tags":[],"documentation":"Reset properties of the field, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"classNames":{"memberType":16},"errorMessageElement":{"memberType":16},"value":{"memberType":2,"attribName":"value","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"value","tags":[],"documentation":"Value format yyyy-mm-dd  e.g., 2005-12-01","type":"string","default":"''"}},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"''"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to input field","type":"string","default":"''"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"required":{"memberType":2,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that be shown when required is set and condition not met","type":"string","default":"'This field is required'"}},"validationMessage":{"memberType":1,"attribName":"validation-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"validationMessage","tags":[],"documentation":"(optional) Text that be shown when min or max are set and condition not met","type":"string","default":"\"The field doesn't comply with the specified format\""}},"disabled":{"memberType":2,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"min":{"memberType":2,"attribName":"min","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"min","tags":[],"documentation":"(optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd","type":"string","default":"''"},"watchCallbacks":["minWatch"]},"max":{"memberType":2,"attribName":"max","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"max","tags":[],"documentation":"(optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd","type":"string","default":"''"},"watchCallbacks":["maxWatch"]},"step":{"memberType":2,"attribName":"step","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"step","tags":[],"documentation":"(optional) Step specifies the legal number intervals for the input field","type":"string","default":"'1'"}}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[{"eventName":"_valueChange","eventMethodName":"emitValueChange","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"emitValueChange","tags":[],"documentation":"","type":"(event: CustomEvent<any>) => void"}},{"eventName":"_statusChange","eventMethodName":"emitStatusChange","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"emitStatusChange","tags":[],"documentation":"","type":"(event: CustomEvent<any>) => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date/dot-date.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { checkProp, getClassNames, getTagError, getTagHint, getHintId } from '../../utils';\r\nimport { setDotAttributesToElement, getDotAttributesFromElement } from '../dot-form/utils';\r\nexport class DotDateComponent {\r\n    constructor() {\r\n        this.value = '';\r\n        this.name = '';\r\n        this.label = '';\r\n        this.hint = '';\r\n        this.required = false;\r\n        this.requiredMessage = 'This field is required';\r\n        this.validationMessage = \"The field doesn't comply with the specified format\";\r\n        this.disabled = false;\r\n        this.min = '';\r\n        this.max = '';\r\n        this.step = '1';\r\n    }\r\n    reset() {\r\n        const input = this.el.querySelector('dot-input-calendar');\r\n        input.reset();\r\n    }\r\n    componentWillLoad() {\r\n        this.validateProps();\r\n    }\r\n    componentDidLoad() {\r\n        const attrException = ['dottype'];\r\n        const htmlElement = this.el.querySelector('input[type=\"date\"]');\r\n        setTimeout(() => {\r\n            const attrs = getDotAttributesFromElement(Array.from(this.el.attributes), attrException);\r\n            setDotAttributesToElement(htmlElement, attrs);\r\n        }, 0);\r\n    }\r\n    minWatch() {\r\n        this.min = checkProp(this, 'min', 'date');\r\n    }\r\n    maxWatch() {\r\n        this.max = checkProp(this, 'max', 'date');\r\n    }\r\n    emitValueChange(event) {\r\n        event.stopImmediatePropagation();\r\n        const valueEvent = event.detail;\r\n        this.value = valueEvent.value;\r\n        this.valueChange.emit(valueEvent);\r\n    }\r\n    emitStatusChange(event) {\r\n        event.stopImmediatePropagation();\r\n        const inputCalendarStatus = event.detail;\r\n        this.classNames = getClassNames(inputCalendarStatus.status, inputCalendarStatus.status.dotValid, this.required);\r\n        this.setErrorMessageElement(inputCalendarStatus);\r\n        this.statusChange.emit({\r\n            name: inputCalendarStatus.name,\r\n            status: inputCalendarStatus.status\r\n        });\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: this.classNames\r\n        };\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { label: this.label, required: this.required, name: this.name },\r\n                h(\"dot-input-calendar\", { \"aria-describedby\": getHintId(this.hint), tabIndex: this.hint ? 0 : null, disabled: this.disabled, type: \"date\", name: this.name, value: this.value, required: this.required, min: this.min, max: this.max, step: this.step })),\r\n            getTagHint(this.hint),\r\n            this.errorMessageElement));\r\n    }\r\n    validateProps() {\r\n        this.minWatch();\r\n        this.maxWatch();\r\n    }\r\n    setErrorMessageElement(statusEvent) {\r\n        this.errorMessageElement = getTagError(!statusEvent.status.dotValid && !statusEvent.status.dotPristine, this.getErrorMessage(statusEvent));\r\n    }\r\n    getErrorMessage(statusEvent) {\r\n        return !!this.value\r\n            ? statusEvent.isValidRange\r\n                ? ''\r\n                : this.validationMessage\r\n            : this.requiredMessage;\r\n    }\r\n    static get is() { return \"dot-date\"; }\r\n    static get properties() { return {\r\n        \"classNames\": {\r\n            \"state\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"errorMessageElement\": {\r\n            \"state\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"max\": {\r\n            \"type\": String,\r\n            \"attr\": \"max\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"maxWatch\"]\r\n        },\r\n        \"min\": {\r\n            \"type\": String,\r\n            \"attr\": \"min\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"minWatch\"]\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"step\": {\r\n            \"type\": String,\r\n            \"attr\": \"step\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"validationMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"validation-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"_valueChange\",\r\n            \"method\": \"emitValueChange\"\r\n        }, {\r\n            \"name\": \"_statusChange\",\r\n            \"method\": \"emitStatusChange\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-date:**/\"; }\r\n}\r\n"}