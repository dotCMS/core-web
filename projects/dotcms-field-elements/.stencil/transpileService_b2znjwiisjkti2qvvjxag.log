{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/dot-form.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/services/dot-upload.service"],"externalImports":["@stencil/core","dotcms-models","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-form-row"},{"tag":"dot-error-message"}],"cmpMeta":{"tagNameMeta":"dot-form","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/dot-form.scss","cmpRelativePath":"dot-form.scss","originalComponentPath":"dot-form.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotFormComponent","tags":[],"documentation":"","type":"typeof DotFormComponent"},"encapsulationMeta":0,"componentClass":"DotFormComponent","membersMeta":{"el":{"memberType":64},"status":{"memberType":16},"errorMessage":{"memberType":16},"uploadFileInProgress":{"memberType":16},"fieldsToShow":{"memberType":1,"attribName":"fields-to-show","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"fieldsToShow","tags":[],"documentation":"(optional) List of fields (variableName) separated by comma, to be shown","type":"string"},"watchCallbacks":["fieldsToShowWatch"]},"resetLabel":{"memberType":1,"attribName":"reset-label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"resetLabel","tags":[],"documentation":"(optional) Text to be rendered on Reset button","type":"string","default":"'Reset'"}},"submitLabel":{"memberType":1,"attribName":"submit-label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"submitLabel","tags":[],"documentation":"(optional) Text to be rendered on Submit button","type":"string","default":"'Submit'"}},"layout":{"memberType":1,"attribName":"layout","attribType":{"text":"DotCMSContentTypeLayoutRow[]","required":false,"optional":false,"typeReferences":{"DotCMSContentTypeLayoutRow":{"referenceLocation":"import","importReferenceLocation":"dotcms-models"}}},"reflectToAttrib":true,"propType":0,"jsdoc":{"name":"layout","tags":[],"documentation":"Layout metada to be rendered","type":"DotCMSContentTypeLayoutRow[]","default":"[]"},"watchCallbacks":["layoutWatch"]},"variable":{"memberType":1,"attribName":"variable","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"variable","tags":[],"documentation":"Content type variable name","type":"string","default":"''"}}},"eventsMeta":[],"listenersMeta":[{"eventName":"valueChange","eventMethodName":"onValueChange","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"onValueChange","tags":[{"name":"param","text":"CustomEvent event"},{"name":"memberof","text":"DotFormComponent"}],"documentation":"Update the form value when valueChange in any of the child fields.","type":"(event: CustomEvent<any>) => void"}},{"eventName":"statusChange","eventMethodName":"onStatusChange","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"onStatusChange","tags":[{"name":"param","text":"CustomEvent event"},{"name":"memberof","text":"DotFormComponent"}],"documentation":"Update the form status when statusChange in any of the child fields","type":"({ detail }: CustomEvent<any>) => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/dot-form.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { fieldCustomProcess, getFieldsFromLayout, getErrorMessage } from './utils';\r\nimport { getClassNames, getOriginalStatus, updateStatus } from '../../utils';\r\nimport { DotUploadService } from './services/dot-upload.service';\r\nconst SUBMIT_FORM_API_URL = '/api/v1/workflow/actions/default/fire/NEW';\r\nconst fallbackErrorMessages = {\r\n    500: '500 Internal Server Error',\r\n    400: '400 Bad Request',\r\n    401: '401 Unauthorized Error'\r\n};\r\nexport class DotFormComponent {\r\n    constructor() {\r\n        this.resetLabel = 'Reset';\r\n        this.submitLabel = 'Submit';\r\n        this.layout = [];\r\n        this.variable = '';\r\n        this.status = getOriginalStatus();\r\n        this.errorMessage = '';\r\n        this.uploadFileInProgress = false;\r\n        this.fieldsStatus = {};\r\n        this.value = {};\r\n    }\r\n    onValueChange(event) {\r\n        const { tagName } = event.target;\r\n        const { name, value } = event.detail;\r\n        const process = fieldCustomProcess[tagName];\r\n        if (tagName === 'DOT-BINARY-FILE' && value) {\r\n            this.uploadFile(event).then((tempFile) => {\r\n                this.value[name] = tempFile && tempFile.id;\r\n            });\r\n        }\r\n        else {\r\n            this.value[name] = process ? process(value) : value;\r\n        }\r\n    }\r\n    onStatusChange({ detail }) {\r\n        this.fieldsStatus[detail.name] = detail.status;\r\n        this.status = updateStatus(this.status, {\r\n            dotTouched: this.getTouched(),\r\n            dotPristine: this.getStatusValueByName('dotPristine'),\r\n            dotValid: this.getStatusValueByName('dotValid')\r\n        });\r\n    }\r\n    layoutWatch() {\r\n        this.value = this.getUpdateValue();\r\n    }\r\n    fieldsToShowWatch() {\r\n        this.value = this.getUpdateValue();\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: getClassNames(this.status, this.status.dotValid)\r\n        };\r\n    }\r\n    componentWillLoad() {\r\n        this.value = this.getUpdateValue();\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"form\", { onSubmit: this.handleSubmit.bind(this) },\r\n                this.layout.map((row) => (h(\"dot-form-row\", { row: row, \"fields-to-show\": this.fieldsToShow }))),\r\n                h(\"div\", { class: \"dot-form__buttons\" },\r\n                    h(\"button\", { type: \"reset\", onClick: () => this.resetForm() }, this.resetLabel),\r\n                    h(\"button\", { type: \"submit\", disabled: !this.status.dotValid || this.uploadFileInProgress }, this.submitLabel))),\r\n            h(\"dot-error-message\", null, this.errorMessage)));\r\n    }\r\n    getStatusValueByName(name) {\r\n        return Object.values(this.fieldsStatus)\r\n            .map((field) => field[name])\r\n            .every((item) => item === true);\r\n    }\r\n    getTouched() {\r\n        return Object.values(this.fieldsStatus)\r\n            .map((field) => field.dotTouched)\r\n            .includes(true);\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        fetch(SUBMIT_FORM_API_URL, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                contentlet: Object.assign({ contentType: this.variable }, this.value)\r\n            })\r\n        })\r\n            .then(async (response) => {\r\n            if (response.status !== 200) {\r\n                const error = {\r\n                    message: await response.text(),\r\n                    status: response.status\r\n                };\r\n                throw error;\r\n            }\r\n            return response.json();\r\n        })\r\n            .then((jsonResponse) => {\r\n            const contentlet = jsonResponse.entity;\r\n            this.runSuccessCallback(contentlet);\r\n        })\r\n            .catch(({ message, status }) => {\r\n            this.errorMessage = getErrorMessage(message) || fallbackErrorMessages[status];\r\n        });\r\n    }\r\n    runSuccessCallback(contentlet) {\r\n        const successCallback = this.getSuccessCallback();\r\n        if (successCallback) {\r\n            return function () {\r\n                return eval(successCallback);\r\n            }.call({ contentlet });\r\n        }\r\n    }\r\n    getSuccessCallback() {\r\n        const successCallback = getFieldsFromLayout(this.layout).filter((field) => field.variable === 'formSuccessCallback')[0];\r\n        return successCallback.values;\r\n    }\r\n    resetForm() {\r\n        const elements = Array.from(this.el.querySelectorAll('form dot-form-column > *'));\r\n        elements.forEach((element) => {\r\n            try {\r\n                element.reset();\r\n            }\r\n            catch (error) {\r\n                console.warn(`${element.tagName}`, error);\r\n            }\r\n        });\r\n    }\r\n    getUpdateValue() {\r\n        return getFieldsFromLayout(this.layout)\r\n            .filter((field) => field.fixed === false)\r\n            .reduce((acc, { variable, defaultValue, dataType, values }) => {\r\n            return Object.assign({}, acc, { [variable]: defaultValue || (dataType !== 'TEXT' ? values : null) });\r\n        }, {});\r\n    }\r\n    getMaxSize(event) {\r\n        const attributes = [...event.target.attributes];\r\n        const maxSize = attributes.filter((item) => {\r\n            return item.name === 'max-file-length';\r\n        })[0];\r\n        return maxSize && maxSize.value;\r\n    }\r\n    uploadFile(event) {\r\n        const uploadService = new DotUploadService();\r\n        const file = event.detail.value;\r\n        const maxSize = this.getMaxSize(event);\r\n        const binary = event.target;\r\n        if (!maxSize || file.size <= maxSize) {\r\n            this.uploadFileInProgress = true;\r\n            binary.errorMessage = '';\r\n            return uploadService\r\n                .uploadFile(file, maxSize)\r\n                .then((tempFile) => {\r\n                this.errorMessage = '';\r\n                binary.previewImageUrl = tempFile.thumbnailUrl;\r\n                binary.previewImageName = tempFile.fileName;\r\n                this.uploadFileInProgress = false;\r\n                return tempFile;\r\n            })\r\n                .catch(({ message, status }) => {\r\n                binary.clearValue();\r\n                this.uploadFileInProgress = false;\r\n                this.errorMessage = getErrorMessage(message) || fallbackErrorMessages[status];\r\n                return null;\r\n            });\r\n        }\r\n        else {\r\n            binary.reset();\r\n            binary.errorMessage = `File size larger than allowed ${maxSize} bytes`;\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n    static get is() { return \"dot-form\"; }\r\n    static get properties() { return {\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"errorMessage\": {\r\n            \"state\": true\r\n        },\r\n        \"fieldsToShow\": {\r\n            \"type\": String,\r\n            \"attr\": \"fields-to-show\",\r\n            \"watchCallbacks\": [\"fieldsToShowWatch\"]\r\n        },\r\n        \"layout\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"layout\",\r\n            \"reflectToAttr\": true,\r\n            \"watchCallbacks\": [\"layoutWatch\"]\r\n        },\r\n        \"resetLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"reset-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"submitLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"submit-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"uploadFileInProgress\": {\r\n            \"state\": true\r\n        },\r\n        \"variable\": {\r\n            \"type\": String,\r\n            \"attr\": \"variable\",\r\n            \"reflectToAttr\": true\r\n        }\r\n    }; }\r\n    static get listeners() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"onValueChange\"\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"onStatusChange\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-form:**/\"; }\r\n}\r\n"}