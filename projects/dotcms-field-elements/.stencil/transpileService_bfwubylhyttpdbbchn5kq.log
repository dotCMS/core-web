{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-multi-select/dot-multi-select.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-label"}],"cmpMeta":{"tagNameMeta":"dot-multi-select","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-multi-select/dot-multi-select.scss","cmpRelativePath":"dot-multi-select.scss","originalComponentPath":"dot-multi-select.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotMultiSelectComponent","tags":[{"name":"export"},{"name":"class","text":"DotSelectComponent"}],"documentation":"Represent a dotcms multi select control.","type":"typeof DotMultiSelectComponent"},"encapsulationMeta":0,"componentClass":"DotMultiSelectComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"reset","tags":[{"name":"memberof","text":"DotSelectComponent"}],"documentation":"Reset properties of the field, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"_options":{"memberType":16},"status":{"memberType":16},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"''"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to input field","type":"string","default":"''"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"options":{"memberType":1,"attribName":"options","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"options","tags":[],"documentation":"Value/Label dropdown options separated by comma, to be formatted as: Value|Label","type":"string","default":"''"},"watchCallbacks":["optionsWatch"]},"required":{"memberType":1,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"any","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that will be shown when required is set and condition is not met","type":"string","default":"`This field is required`"}},"size":{"memberType":1,"attribName":"size","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"size","tags":[],"documentation":"(optional) Size number of the multi-select dropdown (default=3)","type":"string","default":"'3'"}},"value":{"memberType":2,"attribName":"value","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"value","tags":[],"documentation":"Value set from the dropdown option","type":"string","default":"''"}}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-multi-select/dot-multi-select.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { getClassNames, getDotOptionsFromFieldValue, getErrorClass, getId, getOriginalStatus, getTagError, getTagHint, updateStatus, checkProp, getHintId } from '../../utils';\r\nimport { getDotAttributesFromElement, setDotAttributesToElement } from '../dot-form/utils';\r\nexport class DotMultiSelectComponent {\r\n    constructor() {\r\n        this.disabled = false;\r\n        this.name = '';\r\n        this.label = '';\r\n        this.hint = '';\r\n        this.options = '';\r\n        this.required = false;\r\n        this.requiredMessage = `This field is required`;\r\n        this.size = '3';\r\n        this.value = '';\r\n        this._dotTouched = false;\r\n        this._dotPristine = true;\r\n    }\r\n    componentWillLoad() {\r\n        this.validateProps();\r\n        this.emitInitialValue();\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitStatusChange();\r\n    }\r\n    componentDidLoad() {\r\n        const htmlElement = this.el.querySelector('select');\r\n        setTimeout(() => {\r\n            const attrs = getDotAttributesFromElement(Array.from(this.el.attributes), []);\r\n            setDotAttributesToElement(htmlElement, attrs);\r\n        }, 0);\r\n    }\r\n    optionsWatch() {\r\n        const validOptions = checkProp(this, 'options');\r\n        this._options = getDotOptionsFromFieldValue(validOptions);\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: getClassNames(this.status, this.isValid(), this.required)\r\n        };\r\n    }\r\n    reset() {\r\n        this.value = '';\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitInitialValue();\r\n        this.emitStatusChange();\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { label: this.label, required: this.required, name: this.name },\r\n                h(\"select\", { multiple: true, \"aria-describedby\": getHintId(this.hint), size: +this.size, class: getErrorClass(this.status.dotValid), id: getId(this.name), disabled: this.shouldBeDisabled(), onChange: () => this.setValue() }, this._options.map((item) => {\r\n                    return (h(\"option\", { selected: this.value === item.value ? true : null, value: item.value }, item.label));\r\n                }))),\r\n            getTagHint(this.hint),\r\n            getTagError(!this.isValid(), this.requiredMessage)));\r\n    }\r\n    validateProps() {\r\n        this.optionsWatch();\r\n    }\r\n    shouldBeDisabled() {\r\n        return this.disabled ? true : null;\r\n    }\r\n    setValue() {\r\n        this.value = this.getValueFromMultiSelect();\r\n        this.status = updateStatus(this.status, {\r\n            dotTouched: true,\r\n            dotPristine: false,\r\n            dotValid: this.isValid()\r\n        });\r\n        this.emitValueChange();\r\n        this.emitStatusChange();\r\n    }\r\n    getValueFromMultiSelect() {\r\n        const selected = this.el.querySelectorAll('option:checked');\r\n        const values = Array.from(selected).map((el) => el.value);\r\n        return Array.from(values).join(',');\r\n    }\r\n    emitInitialValue() {\r\n        if (!this.value) {\r\n            this.value = this._options.length ? this._options[0].value : '';\r\n            this.emitValueChange();\r\n        }\r\n    }\r\n    emitStatusChange() {\r\n        this.statusChange.emit({\r\n            name: this.name,\r\n            status: this.status\r\n        });\r\n    }\r\n    isValid() {\r\n        return this.required ? !!this.value : true;\r\n    }\r\n    emitValueChange() {\r\n        this.valueChange.emit({\r\n            name: this.name,\r\n            value: this.value\r\n        });\r\n    }\r\n    static get is() { return \"dot-multi-select\"; }\r\n    static get properties() { return {\r\n        \"_options\": {\r\n            \"state\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"options\": {\r\n            \"type\": String,\r\n            \"attr\": \"options\",\r\n            \"reflectToAttr\": true,\r\n            \"watchCallbacks\": [\"optionsWatch\"]\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"size\": {\r\n            \"type\": String,\r\n            \"attr\": \"size\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-multi-select:**/\"; }\r\n}\r\n"}