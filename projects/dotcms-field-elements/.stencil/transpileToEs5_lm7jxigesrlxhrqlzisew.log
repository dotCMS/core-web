dotcmsFields.loadBundle('/**:bundle-id:**/', ['exports', './chunk-42b2163a.js'], function (exports, __chunk_2) {
    var h = window.dotcmsFields.h;
    var DotFormFields = {
        Text: function (field) { return (h("dot-textfield", { hint: field.hint, label: field.name, name: field.variable, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, "regex-check": field.regexCheck, required: field.required, value: field.defaultValue })); },
        Textarea: function (field) { return (h("dot-textarea", { hint: field.hint, label: field.name, name: field.variable, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, "regex-check": field.regexCheck, required: field.required, value: field.defaultValue })); },
        Checkbox: function (field) { return (h("dot-checkbox", { hint: field.hint, label: field.name, name: field.variable, options: field.values, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required, value: field.defaultValue })); },
        'Multi-Select': function (field) { return (h("dot-multi-select", { hint: field.hint, label: field.name, name: field.variable, options: field.values, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required, value: field.defaultValue })); },
        'Key-Value': function (field) { return (h("dot-key-value", { "field-type": field.fieldType, hint: field.hint, label: field.name, name: field.variable, required: field.required, value: field.defaultValue })); },
        Select: function (field) { return (h("dot-select", { hint: field.hint, label: field.name, name: field.variable, options: field.values, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required, value: field.defaultValue })); },
        Radio: function (field) { return (h("dot-radio", { hint: field.hint, label: field.name, name: field.variable, options: field.values, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required, value: field.defaultValue })); },
        Date: function (field) { return (h("dot-date", { hint: field.hint, label: field.name, name: field.variable, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required, value: field.defaultValue })); },
        Time: function (field) { return (h("dot-time", { hint: field.hint, label: field.name, name: field.variable, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required, value: field.defaultValue })); },
        'Date-and-Time': function (field) { return (h("dot-date-time", { hint: field.hint, label: field.name, name: field.variable, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required, value: field.defaultValue })); },
        'Date-Range': function (field) { return (h("dot-date-range", { hint: field.hint, label: field.name, name: field.variable, required: field.required, value: field.defaultValue })); },
        Tag: function (field) { return (h("dot-tags", { data: function () {
                return fetch('/api/v1/tags')
                    .then(function (data) { return data.json(); })
                    .then(function (items) { return Object.keys(items); })
                    .catch(function () { return []; });
            }, hint: field.hint, label: field.name, name: field.variable, required: field.required, value: field.defaultValue })); },
        Binary: function (field) { return (h("dot-binary-file", { accept: getFieldVariableValue(field.fieldVariables, 'accept'), "max-file-length": getFieldVariableValue(field.fieldVariables, 'maxFileLength'), hint: field.hint, label: field.name, name: field.variable, ref: function (el) {
                setAttributesToTag(el, field.fieldVariables);
            }, required: field.required })); }
    };
    var DOT_ATTR_PREFIX = 'dot';
    function setAttributesToTag(element, fieldVariables) {
        fieldVariables.forEach(function (_a) {
            var key = _a.key, value = _a.value;
            element.setAttribute(key, value);
        });
    }
    var pipedValuesToObject = function (values) {
        return __chunk_2.isStringType(values)
            ? values.split(',').reduce(function (acc, item) {
                var _a;
                var _b = item.split('|'), key = _b[0], value = _b[1];
                return Object.assign({}, acc, (_a = {}, _a[key] = value, _a));
            }, {})
            : null;
    };
    function isDotAttribute(name) {
        return name.startsWith(DOT_ATTR_PREFIX);
    }
    function setDotAttributesToElement(element, attributes) {
        attributes.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            element.setAttribute(name.replace(DOT_ATTR_PREFIX, ''), value);
        });
    }
    function getDotAttributesFromElement(attributes, attrException) {
        var exceptions = attrException.map(function (attr) { return attr.toUpperCase(); });
        return attributes.filter(function (item) { return !exceptions.includes(item.name.toUpperCase()) && isDotAttribute(item.name); });
    }
    var shouldShowField = function (field, fieldsToShow) {
        var fields2Show = fieldsToShow ? fieldsToShow.split(',') : [];
        return !fields2Show.length || fields2Show.includes(field.variable);
    };
    var getFieldVariableValue = function (fieldVariables, key) {
        var variable = fieldVariables.filter(function (item) { return item.key.toUpperCase() === key.toUpperCase(); })[0];
        return variable && variable.value;
    };
    var getErrorMessage = function (message) {
        var messageObj = JSON.parse(message);
        return messageObj.errors.length && messageObj.errors[0].message
            ? messageObj.errors[0].message
            : message;
    };
    var getFieldsFromLayout = function (layout) {
        return layout.reduce(function (acc, _a) {
            var columns = _a.columns;
            return acc.concat.apply(acc, columns.map(function (col) { return col.fields; }));
        }, []);
    };
    var fieldParamsConversionFromBE = {
        'Key-Value': function (field) {
            if (field.defaultValue && typeof field.defaultValue !== 'string') {
                var valuesArray = Object.keys(field.defaultValue).map(function (key) {
                    return { key: key, value: field.defaultValue[key] };
                });
                field.defaultValue = __chunk_2.getStringFromDotKeyArray(valuesArray);
            }
            return DotFormFields['Key-Value'](field);
        }
    };
    var fieldCustomProcess = {
        'DOT-KEY-VALUE': pipedValuesToObject
    };
    var fieldMap = {
        Time: DotFormFields.Time,
        Textarea: DotFormFields.Textarea,
        Text: DotFormFields.Text,
        Tag: DotFormFields.Tag,
        Select: DotFormFields.Select,
        Radio: DotFormFields.Radio,
        'Multi-Select': DotFormFields['Multi-Select'],
        'Key-Value': fieldParamsConversionFromBE['Key-Value'],
        'Date-and-Time': DotFormFields['Date-and-Time'],
        'Date-Range': DotFormFields['Date-Range'],
        Date: DotFormFields.Date,
        Checkbox: DotFormFields.Checkbox,
        Binary: DotFormFields.Binary
    };
    exports.getDotAttributesFromElement = getDotAttributesFromElement;
    exports.setDotAttributesToElement = setDotAttributesToElement;
    exports.DOT_ATTR_PREFIX = DOT_ATTR_PREFIX;
    exports.getErrorMessage = getErrorMessage;
    exports.getFieldsFromLayout = getFieldsFromLayout;
    exports.fieldCustomProcess = fieldCustomProcess;
    exports.shouldShowField = shouldShowField;
    exports.fieldMap = fieldMap;
});
