{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/services/dot-upload.service.ts","localImports":[],"externalImports":["dotcms-models"],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/services/dot-upload.service.js"},"jsText":"export class DotUploadService {\r\n    constructor() { }\r\n    uploadFile(file, maxSize) {\r\n        if (typeof file === 'string') {\r\n            return this.uploadFileByURL(file);\r\n        }\r\n        else {\r\n            return this.uploadBinaryFile(file, maxSize);\r\n        }\r\n    }\r\n    uploadFileByURL(url) {\r\n        const UPLOAD_FILE_FROM_URL = '/api/v1/temp/byUrl';\r\n        return fetch(UPLOAD_FILE_FROM_URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Origin: window.location.hostname\r\n            },\r\n            body: JSON.stringify({\r\n                remoteUrl: url\r\n            })\r\n        }).then(async (response) => {\r\n            if (response.status === 200) {\r\n                return (await response.json()).tempFiles[0];\r\n            }\r\n            else {\r\n                const error = {\r\n                    message: (await response.json()).message,\r\n                    status: response.status\r\n                };\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    uploadBinaryFile(file, maxSize) {\r\n        let path = `/api/v1/temp`;\r\n        path += maxSize ? `?maxFileLength=${maxSize}` : '';\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n        return fetch(path, {\r\n            method: 'POST',\r\n            headers: {\r\n                Origin: window.location.hostname\r\n            },\r\n            body: formData\r\n        }).then(async (response) => {\r\n            if (response.status === 200) {\r\n                return (await response.json()).tempFiles[0];\r\n            }\r\n            else {\r\n                const error = {\r\n                    message: (await response.json()).message,\r\n                    status: response.status\r\n                };\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n"}