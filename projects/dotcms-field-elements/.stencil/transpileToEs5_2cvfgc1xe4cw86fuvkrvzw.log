import { h } from '../dotcmsfields.core.js';
import { a as Fragment } from './chunk-1d89c98b.js';
import { b as checkProp, n as getDotOptionsFromFieldValue, a as getOriginalStatus, c as getClassNames, h as getHintId, d as getTagHint, e as getTagError, f as updateStatus, l as getStringFromDotKeyArray } from './chunk-62cd3eff.js';
var mapToKeyValue = function (_a) {
    var label = _a.label, value = _a.value;
    return {
        key: label,
        value: value
    };
};
var DotKeyValueComponent = /** @class */ (function () {
    function DotKeyValueComponent() {
        this.disabled = false;
        this.hint = '';
        this.label = '';
        this.name = '';
        this.required = false;
        this.requiredMessage = 'This field is required';
        this.value = '';
        this.items = [];
    }
    DotKeyValueComponent.prototype.valueWatch = function () {
        this.value = checkProp(this, 'value', 'string');
        this.items = getDotOptionsFromFieldValue(this.value).map(mapToKeyValue);
    };
    DotKeyValueComponent.prototype.reset = function () {
        this.items = [];
        this.value = '';
        this.status = getOriginalStatus(this.isValid());
        this.emitChanges();
    };
    DotKeyValueComponent.prototype.deleteItemHandler = function (event) {
        event.stopImmediatePropagation();
        this.items = this.items.filter(function (_item, index) { return index !== event.detail; });
        this.refreshStatus();
        this.emitChanges();
    };
    DotKeyValueComponent.prototype.addItemHandler = function (_a) {
        var detail = _a.detail;
        this.items = this.items.concat([detail]);
        this.refreshStatus();
        this.emitChanges();
    };
    DotKeyValueComponent.prototype.componentWillLoad = function () {
        this.validateProps();
        this.setOriginalStatus();
        this.emitStatusChange();
    };
    DotKeyValueComponent.prototype.hostData = function () {
        return {
            class: getClassNames(this.status, this.isValid(), this.required)
        };
    };
    DotKeyValueComponent.prototype.render = function () {
        return (h(Fragment, null, h("dot-label", { "aria-describedby": getHintId(this.hint), tabIndex: this.hint ? 0 : null, label: this.label, required: this.required, name: this.name }, h("key-value-form", { onLostFocus: this.blurHandler.bind(this), "add-button-label": this.formAddButtonLabel, disabled: this.isDisabled(), "key-label": this.formKeyLabel, "key-placeholder": this.formKeyPlaceholder, "value-label": this.formValueLabel, "value-placeholder": this.formValuePlaceholder }), h("key-value-table", { onClick: function (e) {
                e.preventDefault();
            }, "button-label": this.listDeleteLabel, disabled: this.isDisabled(), items: this.items })), getTagHint(this.hint), getTagError(this.showErrorMessage(), this.getErrorMessage())));
    };
    DotKeyValueComponent.prototype.isDisabled = function () {
        return this.disabled || null;
    };
    DotKeyValueComponent.prototype.blurHandler = function () {
        if (!this.status.dotTouched) {
            this.status = updateStatus(this.status, {
                dotTouched: true
            });
            this.emitStatusChange();
        }
    };
    DotKeyValueComponent.prototype.validateProps = function () {
        this.valueWatch();
    };
    DotKeyValueComponent.prototype.setOriginalStatus = function () {
        this.status = getOriginalStatus(this.isValid());
    };
    DotKeyValueComponent.prototype.isValid = function () {
        return !(this.required && !this.items.length);
    };
    DotKeyValueComponent.prototype.showErrorMessage = function () {
        return this.getErrorMessage() && !this.status.dotPristine;
    };
    DotKeyValueComponent.prototype.getErrorMessage = function () {
        return this.isValid() ? '' : this.requiredMessage;
    };
    DotKeyValueComponent.prototype.refreshStatus = function () {
        this.status = updateStatus(this.status, {
            dotTouched: true,
            dotPristine: false,
            dotValid: this.isValid()
        });
    };
    DotKeyValueComponent.prototype.emitStatusChange = function () {
        this.statusChange.emit({
            name: this.name,
            status: this.status
        });
    };
    DotKeyValueComponent.prototype.emitValueChange = function () {
        var returnedValue = getStringFromDotKeyArray(this.items);
        this.valueChange.emit({
            name: this.name,
            value: returnedValue
        });
    };
    DotKeyValueComponent.prototype.emitChanges = function () {
        this.emitStatusChange();
        this.emitValueChange();
    };
    Object.defineProperty(DotKeyValueComponent, "is", {
        get: function () { return "dot-key-value"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotKeyValueComponent, "properties", {
        get: function () {
            return {
                "disabled": {
                    "type": Boolean,
                    "attr": "disabled",
                    "reflectToAttr": true
                },
                "el": {
                    "elementRef": true
                },
                "formAddButtonLabel": {
                    "type": String,
                    "attr": "form-add-button-label",
                    "reflectToAttr": true
                },
                "formKeyLabel": {
                    "type": String,
                    "attr": "form-key-label",
                    "reflectToAttr": true
                },
                "formKeyPlaceholder": {
                    "type": String,
                    "attr": "form-key-placeholder",
                    "reflectToAttr": true
                },
                "formValueLabel": {
                    "type": String,
                    "attr": "form-value-label",
                    "reflectToAttr": true
                },
                "formValuePlaceholder": {
                    "type": String,
                    "attr": "form-value-placeholder",
                    "reflectToAttr": true
                },
                "hint": {
                    "type": String,
                    "attr": "hint",
                    "reflectToAttr": true
                },
                "items": {
                    "state": true
                },
                "label": {
                    "type": String,
                    "attr": "label",
                    "reflectToAttr": true
                },
                "listDeleteLabel": {
                    "type": String,
                    "attr": "list-delete-label",
                    "reflectToAttr": true
                },
                "name": {
                    "type": String,
                    "attr": "name",
                    "reflectToAttr": true
                },
                "required": {
                    "type": Boolean,
                    "attr": "required",
                    "reflectToAttr": true
                },
                "requiredMessage": {
                    "type": String,
                    "attr": "required-message",
                    "reflectToAttr": true
                },
                "reset": {
                    "method": true
                },
                "status": {
                    "state": true
                },
                "value": {
                    "type": String,
                    "attr": "value",
                    "reflectToAttr": true,
                    "mutable": true,
                    "watchCallbacks": ["valueWatch"]
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotKeyValueComponent, "events", {
        get: function () {
            return [{
                    "name": "valueChange",
                    "method": "valueChange",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }, {
                    "name": "statusChange",
                    "method": "statusChange",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotKeyValueComponent, "listeners", {
        get: function () {
            return [{
                    "name": "delete",
                    "method": "deleteItemHandler"
                }, {
                    "name": "add",
                    "method": "addItemHandler"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotKeyValueComponent, "style", {
        get: function () { return "/**style-placeholder:dot-key-value:**/"; },
        enumerable: true,
        configurable: true
    });
    return DotKeyValueComponent;
}());
var DEFAULT_VALUE = { key: '', value: '' };
var DotKeyValueComponent$1 = /** @class */ (function () {
    function DotKeyValueComponent$1() {
        this.disabled = false;
        this.addButtonLabel = 'Add';
        this.keyPlaceholder = '';
        this.valuePlaceholder = '';
        this.keyLabel = 'Key';
        this.valueLabel = 'Value';
        this.inputs = Object.assign({}, DEFAULT_VALUE);
    }
    DotKeyValueComponent$1.prototype.render = function () {
        var _this = this;
        var buttonDisabled = this.isButtonDisabled();
        return (h("form", { onSubmit: this.addKey.bind(this) }, h("label", null, this.keyLabel, h("input", { disabled: this.disabled, name: "key", onBlur: function (e) { return _this.lostFocus.emit(e); }, onInput: function (event) { return _this.setValue(event); }, placeholder: this.keyPlaceholder, type: "text", value: this.inputs.key })), h("label", null, this.valueLabel, h("input", { disabled: this.disabled, name: "value", onBlur: function (e) { return _this.lostFocus.emit(e); }, onInput: function (event) { return _this.setValue(event); }, placeholder: this.valuePlaceholder, type: "text", value: this.inputs.value })), h("button", { class: "key-value-form__save__button", type: "submit", disabled: buttonDisabled }, this.addButtonLabel)));
    };
    DotKeyValueComponent$1.prototype.isButtonDisabled = function () {
        return !this.isFormValid() || (this.disabled || null);
    };
    DotKeyValueComponent$1.prototype.isFormValid = function () {
        return !!(this.inputs.key.length && this.inputs.value.length);
    };
    DotKeyValueComponent$1.prototype.setValue = function (event) {
        var _a;
        event.stopImmediatePropagation();
        var target = event.target;
        this.inputs = Object.assign({}, this.inputs, (_a = {}, _a[target.name] = target.value.toString(), _a));
    };
    DotKeyValueComponent$1.prototype.addKey = function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (this.inputs.key && this.inputs.value) {
            this.add.emit(this.inputs);
            this.clearForm();
            this.focusKeyInputField();
        }
    };
    DotKeyValueComponent$1.prototype.clearForm = function () {
        this.inputs = Object.assign({}, DEFAULT_VALUE);
    };
    DotKeyValueComponent$1.prototype.focusKeyInputField = function () {
        var input = this.el.querySelector('input[name="key"]');
        input.focus();
    };
    Object.defineProperty(DotKeyValueComponent$1, "is", {
        get: function () { return "key-value-form"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotKeyValueComponent$1, "properties", {
        get: function () {
            return {
                "addButtonLabel": {
                    "type": String,
                    "attr": "add-button-label",
                    "reflectToAttr": true
                },
                "disabled": {
                    "type": Boolean,
                    "attr": "disabled",
                    "reflectToAttr": true
                },
                "el": {
                    "elementRef": true
                },
                "inputs": {
                    "state": true
                },
                "keyLabel": {
                    "type": String,
                    "attr": "key-label",
                    "reflectToAttr": true
                },
                "keyPlaceholder": {
                    "type": String,
                    "attr": "key-placeholder",
                    "reflectToAttr": true
                },
                "valueLabel": {
                    "type": String,
                    "attr": "value-label",
                    "reflectToAttr": true
                },
                "valuePlaceholder": {
                    "type": String,
                    "attr": "value-placeholder",
                    "reflectToAttr": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotKeyValueComponent$1, "events", {
        get: function () {
            return [{
                    "name": "add",
                    "method": "add",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }, {
                    "name": "lostFocus",
                    "method": "lostFocus",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotKeyValueComponent$1, "style", {
        get: function () { return "/**style-placeholder:key-value-form:**/"; },
        enumerable: true,
        configurable: true
    });
    return DotKeyValueComponent$1;
}());
var KeyValueTableComponent = /** @class */ (function () {
    function KeyValueTableComponent() {
        this.items = [];
        this.disabled = false;
        this.buttonLabel = 'Delete';
        this.emptyMessage = 'No values';
    }
    KeyValueTableComponent.prototype.render = function () {
        return (h("table", null, h("tbody", null, this.renderRows(this.items))));
    };
    KeyValueTableComponent.prototype.onDelete = function (index) {
        this.delete.emit(index);
    };
    KeyValueTableComponent.prototype.getRow = function (item, index) {
        var _this = this;
        var label = this.buttonLabel + " " + item.key + ", " + item.value;
        return (h("tr", null, h("td", null, h("button", { "aria-label": label, disabled: this.disabled || null, onClick: function () { return _this.onDelete(index); }, class: "dot-key-value__delete-button" }, this.buttonLabel)), h("td", null, item.key), h("td", null, item.value)));
    };
    KeyValueTableComponent.prototype.renderRows = function (items) {
        return this.isValidItems(items) ? items.map(this.getRow.bind(this)) : this.getEmptyRow();
    };
    KeyValueTableComponent.prototype.getEmptyRow = function () {
        return (h("tr", null, h("td", null, this.emptyMessage)));
    };
    KeyValueTableComponent.prototype.isValidItems = function (items) {
        return Array.isArray(items) && !!items.length;
    };
    Object.defineProperty(KeyValueTableComponent, "is", {
        get: function () { return "key-value-table"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyValueTableComponent, "properties", {
        get: function () {
            return {
                "buttonLabel": {
                    "type": String,
                    "attr": "button-label",
                    "reflectToAttr": true
                },
                "disabled": {
                    "type": Boolean,
                    "attr": "disabled",
                    "reflectToAttr": true
                },
                "emptyMessage": {
                    "type": String,
                    "attr": "empty-message",
                    "reflectToAttr": true
                },
                "items": {
                    "type": "Any",
                    "attr": "items"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KeyValueTableComponent, "events", {
        get: function () {
            return [{
                    "name": "delete",
                    "method": "delete",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    return KeyValueTableComponent;
}());
export { DotKeyValueComponent as DotKeyValue, DotKeyValueComponent$1 as KeyValueForm, KeyValueTableComponent as KeyValueTable };
