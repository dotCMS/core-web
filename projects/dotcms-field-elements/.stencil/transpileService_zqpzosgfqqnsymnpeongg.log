{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-binary-file/dot-binary-text-field/dot-binary-text-field.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/models","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"dot-binary-text-field","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-binary-file/dot-binary-text-field/dot-binary-text-field.scss","cmpRelativePath":"dot-binary-text-field.scss","originalComponentPath":"dot-binary-text-field.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotBinaryTextFieldComponent","tags":[{"name":"export"},{"name":"class","text":"DotBinaryFile"}],"documentation":"Represent a dotcms text field for the binary file element.","type":"typeof DotBinaryTextFieldComponent"},"encapsulationMeta":0,"componentClass":"DotBinaryTextFieldComponent","membersMeta":{"el":{"memberType":64},"status":{"memberType":16},"value":{"memberType":2,"attribName":"value","attribType":{"text":"any","required":false,"optional":false},"reflectToAttrib":true,"propType":1,"jsdoc":{"name":"value","tags":[],"documentation":"Value specifies the value of the <input> element","type":"any","default":"null"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"placeholder":{"memberType":1,"attribName":"placeholder","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"placeholder","tags":[],"documentation":"(optional) Placeholder specifies a short hint that describes the expected value of the input field","type":"string","default":"''"}},"required":{"memberType":1,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"accept":{"memberType":1,"attribName":"accept","attribType":{"text":"string","required":false,"optional":false,"typeReferences":{}},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"accept","tags":[],"documentation":"(optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg","type":"string"}},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}}},"eventsMeta":[{"eventMethodName":"fileChange","eventName":"fileChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotBinaryFileEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotBinaryFileEvent":{"referenceLocation":"import","importReferenceLocation":"../../../models"}}},"jsdoc":{"name":"fileChange","tags":[],"documentation":"","type":"EventEmitter<DotBinaryFileEvent>"}},{"eventMethodName":"lostFocus","eventName":"lostFocus","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"lostFocus","tags":[],"documentation":"","type":"EventEmitter<any>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-binary-file/dot-binary-text-field/dot-binary-text-field.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { DotBinaryMessageError } from '../../../models';\r\nimport { getErrorClass, getHintId, isFileAllowed, isValidURL } from '../../../utils';\r\nexport class DotBinaryTextFieldComponent {\r\n    constructor() {\r\n        this.value = null;\r\n        this.hint = '';\r\n        this.placeholder = '';\r\n        this.required = false;\r\n        this.disabled = false;\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"input\", { type: \"text\", \"aria-describedby\": getHintId(this.hint), class: getErrorClass(this.isValid()), disabled: this.disabled, placeholder: this.placeholder, value: this.value, onBlur: () => this.lostFocus.emit(), onKeyDown: (event) => this.keyDownHandler(event), onPaste: (event) => this.pasteHandler(event) })));\r\n    }\r\n    keyDownHandler(evt) {\r\n        if (evt.key === 'Backspace') {\r\n            this.handleBackspace();\r\n        }\r\n        else if (this.shouldPreventEvent(evt)) {\r\n            evt.preventDefault();\r\n        }\r\n    }\r\n    shouldPreventEvent(evt) {\r\n        return !(evt.ctrlKey || evt.metaKey);\r\n    }\r\n    handleBackspace() {\r\n        this.value = '';\r\n        this.emitFile(null, this.required ? DotBinaryMessageError.REQUIRED : null);\r\n    }\r\n    pasteHandler(event) {\r\n        event.preventDefault();\r\n        this.value = '';\r\n        const clipboardData = event.clipboardData;\r\n        if (clipboardData.items.length) {\r\n            if (this.isPastingFile(clipboardData)) {\r\n                this.handleFilePaste(clipboardData.items);\r\n            }\r\n            else {\r\n                const clipBoardFileName = clipboardData.items[0];\r\n                this.handleURLPaste(clipBoardFileName);\r\n            }\r\n        }\r\n    }\r\n    handleFilePaste(items) {\r\n        const clipBoardFileName = items[0];\r\n        const clipBoardFile = items[1].getAsFile();\r\n        clipBoardFileName.getAsString((fileName) => {\r\n            if (isFileAllowed(fileName, this.accept)) {\r\n                this.value = fileName;\r\n                this.emitFile(clipBoardFile);\r\n            }\r\n            else {\r\n                this.emitFile(null, DotBinaryMessageError.INVALID);\r\n            }\r\n        });\r\n    }\r\n    handleURLPaste(clipBoardFileName) {\r\n        clipBoardFileName.getAsString((fileURL) => {\r\n            if (isValidURL(fileURL)) {\r\n                this.value = fileURL;\r\n                this.emitFile(fileURL);\r\n            }\r\n            else {\r\n                this.emitFile(null, DotBinaryMessageError.URLINVALID);\r\n            }\r\n        });\r\n    }\r\n    isPastingFile(data) {\r\n        return !!data.files.length;\r\n    }\r\n    isValid() {\r\n        return !(this.required && !!this.value);\r\n    }\r\n    emitFile(file, errorType) {\r\n        this.fileChange.emit({\r\n            file: file,\r\n            errorType: errorType\r\n        });\r\n    }\r\n    static get is() { return \"dot-binary-text-field\"; }\r\n    static get properties() { return {\r\n        \"accept\": {\r\n            \"type\": String,\r\n            \"attr\": \"accept\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"placeholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"placeholder\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"fileChange\",\r\n            \"method\": \"fileChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"lostFocus\",\r\n            \"method\": \"lostFocus\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-binary-text-field:**/\"; }\r\n}\r\n"}