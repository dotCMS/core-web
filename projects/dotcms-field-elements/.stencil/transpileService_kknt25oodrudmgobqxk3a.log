{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-textarea/dot-textarea.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-label"}],"cmpMeta":{"tagNameMeta":"dot-textarea","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-textarea/dot-textarea.scss","cmpRelativePath":"dot-textarea.scss","originalComponentPath":"dot-textarea.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotTextareaComponent","tags":[{"name":"export"},{"name":"class","text":"DotTextareaComponent"}],"documentation":"Represent a dotcms textarea control.","type":"typeof DotTextareaComponent"},"encapsulationMeta":0,"componentClass":"DotTextareaComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"reset","tags":[{"name":"memberof","text":"DotTextareaComponent"}],"documentation":"Reset properties of the field, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"status":{"memberType":16},"value":{"memberType":2,"attribName":"value","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"value","tags":[],"documentation":"Value specifies the value of the <textarea> element","type":"string","default":"''"},"watchCallbacks":["valueWatch"]},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"''"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to <textarea> element","type":"string","default":"''"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"required":{"memberType":2,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that be shown when required is set and condition not met","type":"string","default":"'This field is required'"}},"validationMessage":{"memberType":1,"attribName":"validation-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"validationMessage","tags":[],"documentation":"(optional) Text that be shown when the Regular Expression condition not met","type":"string","default":"\"The field doesn't comply with the specified format\""}},"disabled":{"memberType":2,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"regexCheck":{"memberType":2,"attribName":"regex-check","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"regexCheck","tags":[],"documentation":"(optional) Regular expresion that is checked against the value to determine if is valid","type":"string","default":"''"},"watchCallbacks":["regexCheckWatch"]}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-textarea/dot-textarea.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { getClassNames, getOriginalStatus, getTagHint, getTagError, getErrorClass, updateStatus, getId, checkProp, getHintId } from '../../utils';\r\nimport { setDotAttributesToElement, getDotAttributesFromElement } from '../dot-form/utils';\r\nexport class DotTextareaComponent {\r\n    constructor() {\r\n        this.value = '';\r\n        this.name = '';\r\n        this.label = '';\r\n        this.hint = '';\r\n        this.required = false;\r\n        this.requiredMessage = 'This field is required';\r\n        this.validationMessage = \"The field doesn't comply with the specified format\";\r\n        this.disabled = false;\r\n        this.regexCheck = '';\r\n    }\r\n    reset() {\r\n        this.value = '';\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitStatusChange();\r\n        this.emitValueChange();\r\n    }\r\n    componentWillLoad() {\r\n        this.value = this.value || '';\r\n        this.validateProps();\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitStatusChange();\r\n    }\r\n    componentDidLoad() {\r\n        const htmlElement = this.el.querySelector('textarea');\r\n        setTimeout(() => {\r\n            const attrs = getDotAttributesFromElement(Array.from(this.el.attributes), []);\r\n            setDotAttributesToElement(htmlElement, attrs);\r\n        }, 0);\r\n    }\r\n    regexCheckWatch() {\r\n        this.regexCheck = checkProp(this, 'regexCheck');\r\n    }\r\n    valueWatch() {\r\n        this.value = this.value || '';\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: getClassNames(this.status, this.isValid(), this.required)\r\n        };\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { label: this.label, required: this.required, name: this.name },\r\n                h(\"textarea\", { \"aria-describedby\": getHintId(this.hint), class: getErrorClass(this.status.dotValid), id: getId(this.name), name: this.name, value: this.value, required: this.getRequiredAttr(), onInput: (event) => this.setValue(event), onBlur: () => this.blurHandler(), disabled: this.getDisabledAtt() })),\r\n            getTagHint(this.hint),\r\n            getTagError(this.shouldShowErrorMessage(), this.getErrorMessage())));\r\n    }\r\n    validateProps() {\r\n        this.regexCheckWatch();\r\n    }\r\n    getDisabledAtt() {\r\n        return this.disabled || null;\r\n    }\r\n    getRequiredAttr() {\r\n        return this.required ? true : null;\r\n    }\r\n    isValid() {\r\n        return !this.isValueRequired() && this.isRegexValid();\r\n    }\r\n    isValueRequired() {\r\n        return this.required && !this.value.length;\r\n    }\r\n    isRegexValid() {\r\n        if (this.regexCheck && this.value.length) {\r\n            const regex = new RegExp(this.regexCheck, 'ig');\r\n            return regex.test(this.value);\r\n        }\r\n        return true;\r\n    }\r\n    shouldShowErrorMessage() {\r\n        return this.getErrorMessage() && !this.status.dotPristine;\r\n    }\r\n    getErrorMessage() {\r\n        return this.isRegexValid()\r\n            ? this.isValid()\r\n                ? ''\r\n                : this.requiredMessage\r\n            : this.validationMessage;\r\n    }\r\n    blurHandler() {\r\n        if (!this.status.dotTouched) {\r\n            this.status = updateStatus(this.status, {\r\n                dotTouched: true\r\n            });\r\n            this.emitStatusChange();\r\n        }\r\n    }\r\n    setValue(event) {\r\n        this.value = event.target.value.toString();\r\n        this.status = updateStatus(this.status, {\r\n            dotTouched: true,\r\n            dotPristine: false,\r\n            dotValid: this.isValid()\r\n        });\r\n        this.emitValueChange();\r\n        this.emitStatusChange();\r\n    }\r\n    emitStatusChange() {\r\n        this.statusChange.emit({\r\n            name: this.name,\r\n            status: this.status\r\n        });\r\n    }\r\n    emitValueChange() {\r\n        this.valueChange.emit({\r\n            name: this.name,\r\n            value: this.value\r\n        });\r\n    }\r\n    static get is() { return \"dot-textarea\"; }\r\n    static get properties() { return {\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"regexCheck\": {\r\n            \"type\": String,\r\n            \"attr\": \"regex-check\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"regexCheckWatch\"]\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"validationMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"validation-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"valueWatch\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-textarea:**/\"; }\r\n}\r\n"}