import { h } from '../dotcmsfields.core.js';
import { a as Fragment } from './chunk-1d89c98b.js';
import { b as checkProp, c as getClassNames, h as getHintId, d as getTagHint, e as getTagError } from './chunk-62cd3eff.js';
import { a as getDotAttributesFromElement, b as setDotAttributesToElement } from './chunk-4205a04e.js';
var DotTimeComponent = /** @class */ (function () {
    function DotTimeComponent() {
        this.value = '';
        this.name = '';
        this.label = '';
        this.hint = '';
        this.required = false;
        this.requiredMessage = 'This field is required';
        this.validationMessage = "The field doesn't comply with the specified format";
        this.disabled = false;
        this.min = '';
        this.max = '';
        this.step = '1';
    }
    DotTimeComponent.prototype.reset = function () {
        var input = this.el.querySelector('dot-input-calendar');
        input.reset();
    };
    DotTimeComponent.prototype.componentWillLoad = function () {
        this.validateProps();
    };
    DotTimeComponent.prototype.componentDidLoad = function () {
        var _this = this;
        var attrException = ['dottype'];
        var htmlElement = this.el.querySelector('input[type="time"]');
        setTimeout(function () {
            var attrs = getDotAttributesFromElement(Array.from(_this.el.attributes), attrException);
            setDotAttributesToElement(htmlElement, attrs);
        }, 0);
    };
    DotTimeComponent.prototype.minWatch = function () {
        this.min = checkProp(this, 'min', 'time');
    };
    DotTimeComponent.prototype.maxWatch = function () {
        this.max = checkProp(this, 'max', 'time');
    };
    DotTimeComponent.prototype.emitValueChange = function (event) {
        event.stopImmediatePropagation();
        var valueEvent = event.detail;
        this.value = valueEvent.value;
        this.valueChange.emit(valueEvent);
    };
    DotTimeComponent.prototype.emitStatusChange = function (event) {
        event.stopImmediatePropagation();
        var inputCalendarStatus = event.detail;
        this.classNames = getClassNames(inputCalendarStatus.status, inputCalendarStatus.status.dotValid, this.required);
        this.setErrorMessageElement(inputCalendarStatus);
        this.statusChange.emit({
            name: inputCalendarStatus.name,
            status: inputCalendarStatus.status
        });
    };
    DotTimeComponent.prototype.hostData = function () {
        return {
            class: this.classNames
        };
    };
    DotTimeComponent.prototype.render = function () {
        return (h(Fragment, null, h("dot-label", { label: this.label, required: this.required, name: this.name }, h("dot-input-calendar", { "aria-describedby": getHintId(this.hint), tabIndex: this.hint ? 0 : null, disabled: this.disabled, type: "time", name: this.name, value: this.value, required: this.required, min: this.min, max: this.max, step: this.step })), getTagHint(this.hint), this.errorMessageElement));
    };
    DotTimeComponent.prototype.validateProps = function () {
        this.minWatch();
        this.maxWatch();
    };
    DotTimeComponent.prototype.setErrorMessageElement = function (statusEvent) {
        this.errorMessageElement = getTagError(!statusEvent.status.dotValid && !statusEvent.status.dotPristine, this.getErrorMessage(statusEvent));
    };
    DotTimeComponent.prototype.getErrorMessage = function (statusEvent) {
        return !!this.value
            ? statusEvent.isValidRange
                ? ''
                : this.validationMessage
            : this.requiredMessage;
    };
    Object.defineProperty(DotTimeComponent, "is", {
        get: function () { return "dot-time"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotTimeComponent, "properties", {
        get: function () {
            return {
                "classNames": {
                    "state": true
                },
                "disabled": {
                    "type": Boolean,
                    "attr": "disabled",
                    "reflectToAttr": true
                },
                "el": {
                    "elementRef": true
                },
                "errorMessageElement": {
                    "state": true
                },
                "hint": {
                    "type": String,
                    "attr": "hint",
                    "reflectToAttr": true
                },
                "label": {
                    "type": String,
                    "attr": "label",
                    "reflectToAttr": true
                },
                "max": {
                    "type": String,
                    "attr": "max",
                    "reflectToAttr": true,
                    "mutable": true,
                    "watchCallbacks": ["maxWatch"]
                },
                "min": {
                    "type": String,
                    "attr": "min",
                    "reflectToAttr": true,
                    "mutable": true,
                    "watchCallbacks": ["minWatch"]
                },
                "name": {
                    "type": String,
                    "attr": "name",
                    "reflectToAttr": true
                },
                "required": {
                    "type": Boolean,
                    "attr": "required",
                    "reflectToAttr": true
                },
                "requiredMessage": {
                    "type": String,
                    "attr": "required-message",
                    "reflectToAttr": true
                },
                "reset": {
                    "method": true
                },
                "step": {
                    "type": String,
                    "attr": "step",
                    "reflectToAttr": true
                },
                "validationMessage": {
                    "type": String,
                    "attr": "validation-message",
                    "reflectToAttr": true
                },
                "value": {
                    "type": String,
                    "attr": "value",
                    "reflectToAttr": true,
                    "mutable": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotTimeComponent, "events", {
        get: function () {
            return [{
                    "name": "valueChange",
                    "method": "valueChange",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }, {
                    "name": "statusChange",
                    "method": "statusChange",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotTimeComponent, "listeners", {
        get: function () {
            return [{
                    "name": "_valueChange",
                    "method": "emitValueChange"
                }, {
                    "name": "_statusChange",
                    "method": "emitStatusChange"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DotTimeComponent, "style", {
        get: function () { return "/**style-placeholder:dot-time:**/"; },
        enumerable: true,
        configurable: true
    });
    return DotTimeComponent;
}());
export { DotTimeComponent as DotTime };
