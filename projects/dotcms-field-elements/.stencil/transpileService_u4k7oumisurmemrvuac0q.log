{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date-time/dot-date-time.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils/props/validators"],"externalImports":["@stencil/core","stencil-fragment","stencil-fragment"],"potentialCmpRefs":[{"tag":"dot-label"},{"tag":"dot-input-calendar"}],"cmpMeta":{"tagNameMeta":"dot-date-time","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date-time/dot-date-time.scss","cmpRelativePath":"dot-date-time.scss","originalComponentPath":"dot-date-time.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotDateTimeComponent","tags":[],"documentation":"","type":"typeof DotDateTimeComponent"},"encapsulationMeta":0,"componentClass":"DotDateTimeComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{"DotInputCalendar":{"referenceLocation":"global"}}},"jsdoc":{"name":"reset","tags":[],"documentation":"Reset properties of the filed, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"classNames":{"memberType":16},"errorMessageElement":{"memberType":16},"value":{"memberType":2,"attribName":"value","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"value","tags":[],"documentation":"Value format yyyy-mm-dd hh:mm:ss e.g., 2005-12-01 15:22:00","type":"string","default":"''"},"watchCallbacks":["valueWatch"]},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"''"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to input field","type":"string","default":"''"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"required":{"memberType":1,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is mandatory","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that be shown when required is set and condition not met","type":"string","default":"'This field is required'"}},"validationMessage":{"memberType":1,"attribName":"validation-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"validationMessage","tags":[],"documentation":"(optional) Text that be shown when min or max are set and condition not met","type":"string","default":"\"The field doesn't comply with the specified format\""}},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"min":{"memberType":2,"attribName":"min","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"min","tags":[],"documentation":"(optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss","type":"string","default":"''"},"watchCallbacks":["minWatch"]},"max":{"memberType":2,"attribName":"max","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"max","tags":[],"documentation":"(optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss","type":"string","default":"''"},"watchCallbacks":["maxWatch"]},"step":{"memberType":2,"attribName":"step","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"step","tags":[],"documentation":"(optional) Step specifies the legal number intervals for the input fields date && time e.g., 2,10","type":"string","default":"'1,1'"},"watchCallbacks":["stepWatch"]},"dateLabel":{"memberType":1,"attribName":"date-label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"dateLabel","tags":[],"documentation":"(optional) The string to use in the date label field","type":"string","default":"'Date'"}},"timeLabel":{"memberType":1,"attribName":"time-label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"timeLabel","tags":[],"documentation":"(optional) The string to use in the time label field","type":"string","default":"'Time'"}}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[{"eventName":"_valueChange","eventMethodName":"emitValueChange","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"emitValueChange","tags":[],"documentation":"","type":"(event: CustomEvent<any>) => void"}},{"eventName":"_statusChange","eventMethodName":"emitStatusChange","eventCapture":false,"eventPassive":false,"eventDisabled":false,"jsdoc":{"name":"emitStatusChange","tags":[],"documentation":"","type":"(event: CustomEvent<any>) => void"}}]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date-time/dot-date-time.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { checkProp, getClassNames, getTagError, getTagHint, getHintId } from '../../utils';\r\nimport { setDotAttributesToElement, getDotAttributesFromElement, DOT_ATTR_PREFIX } from '../dot-form/utils';\r\nimport { dotParseDate } from '../../utils/props/validators';\r\nconst DATE_SUFFIX = '-date';\r\nconst TIME_SUFFIX = '-time';\r\nexport class DotDateTimeComponent {\r\n    constructor() {\r\n        this.value = '';\r\n        this.name = '';\r\n        this.label = '';\r\n        this.hint = '';\r\n        this.required = false;\r\n        this.requiredMessage = 'This field is required';\r\n        this.validationMessage = \"The field doesn't comply with the specified format\";\r\n        this.disabled = false;\r\n        this.min = '';\r\n        this.max = '';\r\n        this.step = '1,1';\r\n        this.dateLabel = 'Date';\r\n        this.timeLabel = 'Time';\r\n        this._step = {\r\n            date: null,\r\n            time: null\r\n        };\r\n        this._status = {\r\n            date: null,\r\n            time: null\r\n        };\r\n    }\r\n    reset() {\r\n        this._status.date = null;\r\n        this._status.time = null;\r\n        const inputs = this.el.querySelectorAll('dot-input-calendar');\r\n        inputs.forEach((input) => {\r\n            input.reset();\r\n        });\r\n        this.valueChange.emit({ name: this.name, value: '' });\r\n    }\r\n    componentWillLoad() {\r\n        this.validateProps();\r\n    }\r\n    valueWatch() {\r\n        this.value = checkProp(this, 'value', 'dateTime');\r\n        this._value = dotParseDate(this.value);\r\n    }\r\n    minWatch() {\r\n        this.min = checkProp(this, 'min', 'dateTime');\r\n        this._minDateTime = dotParseDate(this.min);\r\n    }\r\n    maxWatch() {\r\n        this.max = checkProp(this, 'max', 'dateTime');\r\n        this._maxDateTime = dotParseDate(this.max);\r\n    }\r\n    stepWatch() {\r\n        this.step = checkProp(this, 'step') || '1,1';\r\n        [this._step.date, this._step.time] = this.step.split(',');\r\n    }\r\n    emitValueChange(event) {\r\n        const valueEvent = event.detail;\r\n        event.stopImmediatePropagation();\r\n        this.formatValue(valueEvent);\r\n        if (this.isValueComplete()) {\r\n            this.value = this.getValue();\r\n            this.valueChange.emit({ name: this.name, value: this.value });\r\n        }\r\n    }\r\n    emitStatusChange(event) {\r\n        const inputCalendarStatus = event.detail;\r\n        let status;\r\n        event.stopImmediatePropagation();\r\n        this.setStatus(inputCalendarStatus);\r\n        this.setErrorMessageElement(inputCalendarStatus);\r\n        if (this.isStatusComplete()) {\r\n            status = this.statusHandler();\r\n            this.classNames = getClassNames(status, status.dotValid, this.required);\r\n            this.statusChange.emit({ name: this.name, status: status });\r\n        }\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: this.classNames\r\n        };\r\n    }\r\n    componentDidLoad() {\r\n        this.setDotAttributes();\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { label: this.label, required: this.required, name: this.name },\r\n                h(\"div\", { class: \"dot-date-time__body\", \"aria-describedby\": getHintId(this.hint), tabIndex: this.hint ? 0 : null },\r\n                    h(\"label\", null,\r\n                        this.dateLabel,\r\n                        h(\"dot-input-calendar\", { disabled: this.disabled, type: \"date\", name: this.name + DATE_SUFFIX, value: this._value.date, required: this.required, min: this._minDateTime.date, max: this._maxDateTime.date, step: this._step.date })),\r\n                    h(\"label\", null,\r\n                        this.timeLabel,\r\n                        h(\"dot-input-calendar\", { disabled: this.disabled, type: \"time\", name: this.name + TIME_SUFFIX, value: this._value.time, required: this.required, min: this._minDateTime.time, max: this._maxDateTime.time, step: this._step.time })))),\r\n            getTagHint(this.hint),\r\n            this.errorMessageElement));\r\n    }\r\n    setDotAttributes() {\r\n        const htmlDateElement = this.el.querySelector('input[type=\"date\"]');\r\n        const htmlTimeElement = this.el.querySelector('input[type=\"time\"]');\r\n        const attrException = ['dottype', 'dotstep', 'dotmin', 'dotmax', 'dotvalue'];\r\n        setTimeout(() => {\r\n            let attrs = Array.from(this.el.attributes);\r\n            attrs.forEach(({ name, value }) => {\r\n                const attr = name.replace(DOT_ATTR_PREFIX, '');\r\n                if (this[attr]) {\r\n                    this[attr] = value;\r\n                }\r\n            });\r\n            attrs = getDotAttributesFromElement(Array.from(this.el.attributes), attrException);\r\n            setDotAttributesToElement(htmlDateElement, attrs);\r\n            setDotAttributesToElement(htmlTimeElement, attrs);\r\n        }, 0);\r\n    }\r\n    validateProps() {\r\n        this.minWatch();\r\n        this.maxWatch();\r\n        this.stepWatch();\r\n        this.valueWatch();\r\n    }\r\n    statusHandler() {\r\n        return {\r\n            dotTouched: this._status.date.dotTouched || this._status.time.dotTouched,\r\n            dotValid: this._status.date.dotValid && this._status.time.dotValid,\r\n            dotPristine: this._status.date.dotPristine && this._status.time.dotPristine\r\n        };\r\n    }\r\n    formatValue(event) {\r\n        if (event.name.indexOf(DATE_SUFFIX) >= 0) {\r\n            this._value.date = event.value;\r\n        }\r\n        else {\r\n            this._value.time = event.value;\r\n        }\r\n    }\r\n    getValue() {\r\n        return !!this._value.date && !!this._value.time\r\n            ? `${this._value.date} ${this._value.time}`\r\n            : '';\r\n    }\r\n    setStatus(event) {\r\n        if (event.name.indexOf(DATE_SUFFIX) >= 0) {\r\n            this._status.date = event.status;\r\n        }\r\n        else {\r\n            this._status.time = event.status;\r\n        }\r\n    }\r\n    isValueComplete() {\r\n        return !!this._value.time && !!this._value.date;\r\n    }\r\n    isStatusComplete() {\r\n        return this._status.date && this._status.time;\r\n    }\r\n    isValid() {\r\n        return this.isStatusComplete() ? (this.isStatusInRange() ? true : false) : true;\r\n    }\r\n    isStatusInRange() {\r\n        return this._status.time.isValidRange && this._status.date.isValidRange;\r\n    }\r\n    setErrorMessageElement(statusEvent) {\r\n        if (this.isStatusComplete()) {\r\n            this.errorMessageElement = getTagError(!this.statusHandler().dotValid && !this.statusHandler().dotPristine, this.getErrorMessage());\r\n        }\r\n        else {\r\n            this.errorMessageElement = getTagError(!statusEvent.status.dotPristine, this.getErrorMessage());\r\n        }\r\n    }\r\n    getErrorMessage() {\r\n        return !!this.getValue()\r\n            ? this.isValid()\r\n                ? ''\r\n                : this.validationMessage\r\n            : this.requiredMessage;\r\n    }\r\n    static get is() { return \"dot-date-time\"; }\r\n    static get properties() { return {\r\n        \"classNames\": {\r\n            \"state\": true\r\n        },\r\n        \"dateLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"date-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"errorMessageElement\": {\r\n            \"state\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"max\": {\r\n            \"type\": String,\r\n            \"attr\": \"max\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"maxWatch\"]\r\n        },\r\n        \"min\": {\r\n            \"type\": String,\r\n            \"attr\": \"min\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"minWatch\"]\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"step\": {\r\n            \"type\": String,\r\n            \"attr\": \"step\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"stepWatch\"]\r\n        },\r\n        \"timeLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"time-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"validationMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"validation-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"valueWatch\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get listeners() { return [{\r\n            \"name\": \"_valueChange\",\r\n            \"method\": \"emitValueChange\"\r\n        }, {\r\n            \"name\": \"_statusChange\",\r\n            \"method\": \"emitStatusChange\"\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-date-time:**/\"; }\r\n}\r\n"}