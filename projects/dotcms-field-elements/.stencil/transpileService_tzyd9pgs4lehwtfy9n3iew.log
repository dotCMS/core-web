{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date-range/dot-date-range.tsx","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils"],"externalImports":["@stencil/core","flatpickr","stencil-fragment","stencil-fragment","flatpickr"],"potentialCmpRefs":[{"tag":"dot-label"}],"cmpMeta":{"tagNameMeta":"dot-date-range","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date-range/dot-date-range.scss","cmpRelativePath":"dot-date-range.scss","originalComponentPath":"dot-date-range.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotDateRangeComponent","tags":[],"documentation":"","type":"typeof DotDateRangeComponent"},"encapsulationMeta":0,"componentClass":"DotDateRangeComponent","membersMeta":{"el":{"memberType":64},"reset":{"memberType":32,"attribType":{"text":"() => void","optional":false,"required":false,"typeReferences":{}},"jsdoc":{"name":"reset","tags":[],"documentation":"Reset properties of the field, clear value and emit events.","type":"() => void","returns":{"type":"void","documentation":""},"parameters":[]}},"status":{"memberType":16},"value":{"memberType":2,"attribName":"value","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"value","tags":[],"documentation":"(optional) Value formatted with start and end date splitted with a comma","type":"string","default":"''"},"watchCallbacks":["valueWatch"]},"name":{"memberType":1,"attribName":"name","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"name","tags":[],"documentation":"Name that will be used as ID","type":"string","default":"'daterange'"}},"label":{"memberType":1,"attribName":"label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"label","tags":[],"documentation":"(optional) Text to be rendered next to input field","type":"string","default":"''"}},"hint":{"memberType":1,"attribName":"hint","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"hint","tags":[],"documentation":"(optional) Hint text that suggest a clue of the field","type":"string","default":"''"}},"max":{"memberType":1,"attribName":"max","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"max","tags":[],"documentation":"(optional) Max value that the field will allow to set","type":"string","default":"''"}},"min":{"memberType":1,"attribName":"min","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"min","tags":[],"documentation":"(optional) Min value that the field will allow to set","type":"string","default":"''"}},"required":{"memberType":1,"attribName":"required","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"required","tags":[],"documentation":"(optional) Determine if it is needed","type":"boolean","default":"false"}},"requiredMessage":{"memberType":1,"attribName":"required-message","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"requiredMessage","tags":[],"documentation":"(optional) Text that be shown when required is set and condition not met","type":"string","default":"'This field is required'"}},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"displayFormat":{"memberType":1,"attribName":"display-format","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"displayFormat","tags":[],"documentation":"(optional) Date format used by the field when displayed","type":"string","default":"'Y-m-d'"}},"presets":{"memberType":2,"attribName":"presets","attribType":{"text":"any","required":false,"optional":false},"reflectToAttrib":true,"propType":0,"jsdoc":{"name":"presets","tags":[],"documentation":"(optional) Array of date presets formatted as [{ label: 'PRESET_LABEL', days: NUMBER }]","type":"{ label: string; days: number; }[]","default":"[\n        {\n            label: 'Date Presets',\n            days: 0\n        },\n        {\n            label: 'Last Week',\n            days: -7\n        },\n        {\n            label: 'Next Week',\n            days: 7\n        },\n        {\n            label: 'Last Month',\n            days: -30\n        },\n        {\n            label: 'Next Month',\n            days: 30\n        }\n    ]"},"watchCallbacks":["presetsWatch"]},"presetLabel":{"memberType":1,"attribName":"preset-label","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"presetLabel","tags":[],"documentation":"(optional) Text to be rendered next to presets field","type":"string","default":"'Presets'"}}},"eventsMeta":[{"eventMethodName":"valueChange","eventName":"valueChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldValueEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldValueEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"valueChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldValueEvent>"}},{"eventMethodName":"statusChange","eventName":"statusChange","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"DotFieldStatusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"DotFieldStatusEvent":{"referenceLocation":"import","importReferenceLocation":"../../models"}}},"jsdoc":{"name":"statusChange","tags":[],"documentation":"","type":"EventEmitter<DotFieldStatusEvent>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-date-range/dot-date-range.js"},"jsText":"import Fragment from 'stencil-fragment';\r\nimport { checkProp, getClassNames, getErrorClass, getId, getOriginalStatus, getTagError, getTagHint, updateStatus, getHintId } from '../../utils';\r\nimport flatpickr from 'flatpickr';\r\nexport class DotDateRangeComponent {\r\n    constructor() {\r\n        this.value = '';\r\n        this.name = 'daterange';\r\n        this.label = '';\r\n        this.hint = '';\r\n        this.max = '';\r\n        this.min = '';\r\n        this.required = false;\r\n        this.requiredMessage = 'This field is required';\r\n        this.disabled = false;\r\n        this.displayFormat = 'Y-m-d';\r\n        this.presets = [\r\n            {\r\n                label: 'Date Presets',\r\n                days: 0\r\n            },\r\n            {\r\n                label: 'Last Week',\r\n                days: -7\r\n            },\r\n            {\r\n                label: 'Next Week',\r\n                days: 7\r\n            },\r\n            {\r\n                label: 'Last Month',\r\n                days: -30\r\n            },\r\n            {\r\n                label: 'Next Month',\r\n                days: 30\r\n            }\r\n        ];\r\n        this.presetLabel = 'Presets';\r\n        this.defaultPresets = [\r\n            {\r\n                label: 'Date Presets',\r\n                days: 0\r\n            },\r\n            {\r\n                label: 'Last Week',\r\n                days: -7\r\n            },\r\n            {\r\n                label: 'Next Week',\r\n                days: 7\r\n            },\r\n            {\r\n                label: 'Last Month',\r\n                days: -30\r\n            },\r\n            {\r\n                label: 'Next Month',\r\n                days: 30\r\n            }\r\n        ];\r\n    }\r\n    reset() {\r\n        this.value = '';\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitStatusChange();\r\n        this.emitValueChange();\r\n    }\r\n    valueWatch() {\r\n        const dates = checkProp(this, 'value', 'dateRange');\r\n        if (dates) {\r\n            const [startDate, endDate] = dates.split(',');\r\n            this.flatpickr.setDate([this.parseDate(startDate), this.parseDate(endDate)], false);\r\n        }\r\n    }\r\n    presetsWatch() {\r\n        this.presets = Array.isArray(this.presets) ? this.presets : this.defaultPresets;\r\n    }\r\n    componentWillLoad() {\r\n        this.status = getOriginalStatus(this.isValid());\r\n        this.emitStatusChange();\r\n        this.presetsWatch();\r\n    }\r\n    componentDidLoad() {\r\n        this.flatpickr = flatpickr(`#${getId(this.name)}`, {\r\n            mode: 'range',\r\n            altFormat: this.displayFormat,\r\n            altInput: true,\r\n            maxDate: this.max ? this.parseDate(this.max) : null,\r\n            minDate: this.min ? this.parseDate(this.min) : null,\r\n            onChange: this.setValue.bind(this)\r\n        });\r\n        this.validateProps();\r\n    }\r\n    hostData() {\r\n        return {\r\n            class: getClassNames(this.status, this.isValid(), this.required)\r\n        };\r\n    }\r\n    render() {\r\n        return (h(Fragment, null,\r\n            h(\"dot-label\", { label: this.label, required: this.required, name: this.name },\r\n                h(\"div\", { \"aria-describedby\": getHintId(this.hint), tabIndex: this.hint ? 0 : null, class: \"dot-range__body\" },\r\n                    h(\"input\", { class: getErrorClass(this.status.dotValid), disabled: this.isDisabled(), id: getId(this.name), required: this.required || null, type: \"text\", value: this.value }),\r\n                    h(\"label\", null,\r\n                        this.presetLabel,\r\n                        h(\"select\", { disabled: this.isDisabled(), onChange: this.setPreset.bind(this) }, this.presets.map((item) => {\r\n                            return h(\"option\", { value: item.days }, item.label);\r\n                        }))))),\r\n            getTagHint(this.hint),\r\n            getTagError(this.showErrorMessage(), this.getErrorMessage())));\r\n    }\r\n    parseDate(strDate) {\r\n        const [year, month, day] = strDate.split('-');\r\n        const newDate = new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));\r\n        return newDate;\r\n    }\r\n    validateProps() {\r\n        this.valueWatch();\r\n    }\r\n    isDisabled() {\r\n        return this.disabled || null;\r\n    }\r\n    setPreset(event) {\r\n        const dateRange = [];\r\n        const dt = new Date();\r\n        dt.setDate(dt.getDate() + parseInt(event.target.value, 10));\r\n        if (event.target.value.indexOf('-') > -1) {\r\n            dateRange.push(dt);\r\n            dateRange.push(new Date());\r\n        }\r\n        else {\r\n            dateRange.push(new Date());\r\n            dateRange.push(dt);\r\n        }\r\n        this.flatpickr.setDate(dateRange, true);\r\n    }\r\n    isValid() {\r\n        return !(this.required && !(this.value && this.value.length));\r\n    }\r\n    isDateRangeValid(selectedDates) {\r\n        return selectedDates && selectedDates.length === 2;\r\n    }\r\n    setValue(selectedDates, _dateStr, _instance) {\r\n        this.value = this.isDateRangeValid(selectedDates)\r\n            ? `${selectedDates[0].toISOString().split('T')[0]},${selectedDates[1].toISOString().split('T')[0]}`\r\n            : '';\r\n        this.status = updateStatus(this.status, {\r\n            dotTouched: true,\r\n            dotPristine: false,\r\n            dotValid: this.isValid()\r\n        });\r\n        this.emitValueChange();\r\n        this.emitStatusChange();\r\n    }\r\n    showErrorMessage() {\r\n        return this.getErrorMessage() && !this.status.dotPristine;\r\n    }\r\n    getErrorMessage() {\r\n        return this.isValid() ? '' : this.requiredMessage;\r\n    }\r\n    emitStatusChange() {\r\n        this.statusChange.emit({\r\n            name: this.name,\r\n            status: this.status\r\n        });\r\n    }\r\n    emitValueChange() {\r\n        this.valueChange.emit({\r\n            name: this.name,\r\n            value: this.value\r\n        });\r\n    }\r\n    static get is() { return \"dot-date-range\"; }\r\n    static get properties() { return {\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"displayFormat\": {\r\n            \"type\": String,\r\n            \"attr\": \"display-format\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"hint\": {\r\n            \"type\": String,\r\n            \"attr\": \"hint\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"label\": {\r\n            \"type\": String,\r\n            \"attr\": \"label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"max\": {\r\n            \"type\": String,\r\n            \"attr\": \"max\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"min\": {\r\n            \"type\": String,\r\n            \"attr\": \"min\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"name\": {\r\n            \"type\": String,\r\n            \"attr\": \"name\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"presetLabel\": {\r\n            \"type\": String,\r\n            \"attr\": \"preset-label\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"presets\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"presets\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"presetsWatch\"]\r\n        },\r\n        \"required\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"required\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"requiredMessage\": {\r\n            \"type\": String,\r\n            \"attr\": \"required-message\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"reset\": {\r\n            \"method\": true\r\n        },\r\n        \"status\": {\r\n            \"state\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\",\r\n            \"reflectToAttr\": true,\r\n            \"mutable\": true,\r\n            \"watchCallbacks\": [\"valueWatch\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"valueChange\",\r\n            \"method\": \"valueChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"statusChange\",\r\n            \"method\": \"statusChange\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-date-range:**/\"; }\r\n}\r\n"}