{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-tags/components/dot-autocomplete/dot-autocomplete.tsx","localImports":[],"externalImports":["@stencil/core","@tarekraafat/autocomplete.js/dist/js/autoComplete","@tarekraafat/autocomplete.js/dist/js/autoComplete"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"dot-autocomplete","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-tags/components/dot-autocomplete/dot-autocomplete.scss","cmpRelativePath":"dot-autocomplete.scss","originalComponentPath":"dot-autocomplete.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"DotAutocompleteComponent","tags":[],"documentation":"","type":"typeof DotAutocompleteComponent"},"encapsulationMeta":0,"componentClass":"DotAutocompleteComponent","membersMeta":{"el":{"memberType":64},"disabled":{"memberType":1,"attribName":"disabled","attribType":{"text":"boolean","required":false,"optional":false},"reflectToAttrib":true,"propType":4,"jsdoc":{"name":"disabled","tags":[],"documentation":"(optional) Disables field's interaction","type":"boolean","default":"false"}},"placeholder":{"memberType":1,"attribName":"placeholder","attribType":{"text":"string","required":false,"optional":false},"reflectToAttrib":true,"propType":2,"jsdoc":{"name":"placeholder","tags":[],"documentation":"(optional) text to show when no value is set","type":"string","default":"''"}},"threshold":{"memberType":1,"attribName":"threshold","attribType":{"text":"number","required":false,"optional":false},"reflectToAttrib":true,"propType":8,"jsdoc":{"name":"threshold","tags":[],"documentation":"(optional)  Min characters to start search in the autocomplete input","type":"number","default":"0"},"watchCallbacks":["watchThreshold"]},"maxResults":{"memberType":1,"attribName":"max-results","attribType":{"text":"number","required":false,"optional":false},"reflectToAttrib":true,"propType":8,"jsdoc":{"name":"maxResults","tags":[],"documentation":"(optional)  Max results to show after a autocomplete search","type":"number","default":"0"},"watchCallbacks":["watchMaxResults"]},"debounce":{"memberType":1,"attribName":"debounce","attribType":{"text":"number","required":false,"optional":false},"reflectToAttrib":true,"propType":8,"jsdoc":{"name":"debounce","tags":[],"documentation":"(optional) Duraction in ms to start search into the autocomplete","type":"number","default":"300"}},"data":{"memberType":1,"attribName":"data","attribType":{"text":"() => Promise<string[]> | string[]","required":false,"optional":false,"typeReferences":{"Promise":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"data","tags":[],"documentation":"Function or array of string to get the data to use for the autocomplete search","type":"() => string[] | Promise<string[]>","default":"null"},"watchCallbacks":["watchData"]}},"eventsMeta":[{"eventMethodName":"selection","eventName":"selection","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"string","optional":false,"required":false},"jsdoc":{"name":"selection","tags":[],"documentation":"","type":"EventEmitter<string>"}},{"eventMethodName":"enter","eventName":"enter","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"string","optional":false,"required":false},"jsdoc":{"name":"enter","tags":[],"documentation":"","type":"EventEmitter<string>"}},{"eventMethodName":"lostFocus","eventName":"lostFocus","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"eventType":{"text":"FocusEvent","optional":false,"required":false,"typeReferences":{"EventEmitter":{"referenceLocation":"import","importReferenceLocation":"@stencil/core"},"FocusEvent":{"referenceLocation":"global"}}},"jsdoc":{"name":"lostFocus","tags":[],"documentation":"","type":"EventEmitter<FocusEvent>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-tags/components/dot-autocomplete/dot-autocomplete.js"},"jsText":"import autoComplete from '@tarekraafat/autocomplete.js/dist/js/autoComplete';\r\nexport class DotAutocompleteComponent {\r\n    constructor() {\r\n        this.disabled = false;\r\n        this.placeholder = '';\r\n        this.threshold = 0;\r\n        this.maxResults = 0;\r\n        this.debounce = 300;\r\n        this.data = null;\r\n        this.id = `autoComplete${new Date().getTime()}`;\r\n        this.keyEvent = {\r\n            Enter: this.emitEnter.bind(this),\r\n            Escape: this.clean.bind(this)\r\n        };\r\n    }\r\n    componentDidLoad() {\r\n        if (this.data) {\r\n            this.initAutocomplete();\r\n        }\r\n    }\r\n    render() {\r\n        return (h(\"input\", { autoComplete: \"off\", disabled: this.disabled || null, id: this.id, onBlur: (event) => this.handleBlur(event), onKeyDown: (event) => this.handleKeyDown(event), placeholder: this.placeholder || null }));\r\n    }\r\n    watchThreshold() {\r\n        this.initAutocomplete();\r\n    }\r\n    watchData() {\r\n        this.initAutocomplete();\r\n    }\r\n    watchMaxResults() {\r\n        this.initAutocomplete();\r\n    }\r\n    handleKeyDown(event) {\r\n        const { value } = this.getInputElement();\r\n        if (value && this.keyEvent[event.key]) {\r\n            event.preventDefault();\r\n            this.keyEvent[event.key](value);\r\n        }\r\n    }\r\n    handleBlur(event) {\r\n        event.preventDefault();\r\n        setTimeout(() => {\r\n            if (document.activeElement.parentElement !== this.getResultList()) {\r\n                this.clean();\r\n                this.lostFocus.emit(event);\r\n            }\r\n        }, 0);\r\n    }\r\n    clean() {\r\n        this.getInputElement().value = '';\r\n        this.cleanOptions();\r\n    }\r\n    cleanOptions() {\r\n        this.getResultList().innerHTML = '';\r\n    }\r\n    emitselect(select) {\r\n        this.clean();\r\n        this.selection.emit(select);\r\n    }\r\n    emitEnter(select) {\r\n        if (select) {\r\n            this.clean();\r\n            this.enter.emit(select);\r\n        }\r\n    }\r\n    getInputElement() {\r\n        return this.el.querySelector(`#${this.id}`);\r\n    }\r\n    initAutocomplete() {\r\n        this.clearList();\r\n        new autoComplete({\r\n            data: {\r\n                src: async () => this.getData()\r\n            },\r\n            sort: (a, b) => {\r\n                if (a.match < b.match) {\r\n                    return -1;\r\n                }\r\n                if (a.match > b.match) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            },\r\n            placeHolder: this.placeholder,\r\n            selector: `#${this.id}`,\r\n            threshold: this.threshold,\r\n            searchEngine: 'strict',\r\n            highlight: true,\r\n            maxResults: this.maxResults,\r\n            debounce: this.debounce,\r\n            resultsList: {\r\n                container: () => this.getResultListId(),\r\n                destination: this.getInputElement(),\r\n                position: 'afterend'\r\n            },\r\n            resultItem: ({ match }) => match,\r\n            onSelection: ({ event, selection }) => {\r\n                event.preventDefault();\r\n                this.focusOnInput();\r\n                this.emitselect(selection.value);\r\n            }\r\n        });\r\n    }\r\n    clearList() {\r\n        const list = this.getResultList();\r\n        if (list) {\r\n            list.remove();\r\n        }\r\n    }\r\n    focusOnInput() {\r\n        this.getInputElement().focus();\r\n    }\r\n    getResultList() {\r\n        return this.el.querySelector(`#${this.getResultListId()}`);\r\n    }\r\n    getResultListId() {\r\n        return `${this.id}_results_list`;\r\n    }\r\n    async getData() {\r\n        const autocomplete = this.getInputElement();\r\n        autocomplete.setAttribute('placeholder', 'Loading...');\r\n        const data = typeof this.data === 'function' ? await this.data() : [];\r\n        autocomplete.setAttribute('placeholder', this.placeholder || '');\r\n        return data;\r\n    }\r\n    static get is() { return \"dot-autocomplete\"; }\r\n    static get properties() { return {\r\n        \"data\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"data\",\r\n            \"watchCallbacks\": [\"watchData\"]\r\n        },\r\n        \"debounce\": {\r\n            \"type\": Number,\r\n            \"attr\": \"debounce\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"disabled\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"disabled\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"maxResults\": {\r\n            \"type\": Number,\r\n            \"attr\": \"max-results\",\r\n            \"reflectToAttr\": true,\r\n            \"watchCallbacks\": [\"watchMaxResults\"]\r\n        },\r\n        \"placeholder\": {\r\n            \"type\": String,\r\n            \"attr\": \"placeholder\",\r\n            \"reflectToAttr\": true\r\n        },\r\n        \"threshold\": {\r\n            \"type\": Number,\r\n            \"attr\": \"threshold\",\r\n            \"reflectToAttr\": true,\r\n            \"watchCallbacks\": [\"watchThreshold\"]\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"selection\",\r\n            \"method\": \"selection\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"enter\",\r\n            \"method\": \"enter\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"lostFocus\",\r\n            \"method\": \"lostFocus\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:dot-autocomplete:**/\"; }\r\n}\r\n"}