{"moduleFile":{"sourceFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils/index.ts","localImports":["/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils/fields","/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/utils"],"externalImports":["dotcms-models"],"potentialCmpRefs":[],"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/fmontes/development/core-web/projects/dotcms-field-elements/src/components/dot-form/utils/index.js"},"jsText":"import { DotFormFields } from './fields';\r\nimport { getStringFromDotKeyArray, isStringType } from '../../../utils';\r\nexport const DOT_ATTR_PREFIX = 'dot';\r\nexport function setAttributesToTag(element, fieldVariables) {\r\n    fieldVariables.forEach(({ key, value }) => {\r\n        element.setAttribute(key, value);\r\n    });\r\n}\r\nconst pipedValuesToObject = (values) => {\r\n    return isStringType(values)\r\n        ? values.split(',').reduce((acc, item) => {\r\n            const [key, value] = item.split('|');\r\n            return Object.assign({}, acc, { [key]: value });\r\n        }, {})\r\n        : null;\r\n};\r\nfunction isDotAttribute(name) {\r\n    return name.startsWith(DOT_ATTR_PREFIX);\r\n}\r\nexport function setDotAttributesToElement(element, attributes) {\r\n    attributes.forEach(({ name, value }) => {\r\n        element.setAttribute(name.replace(DOT_ATTR_PREFIX, ''), value);\r\n    });\r\n}\r\nexport function getDotAttributesFromElement(attributes, attrException) {\r\n    const exceptions = attrException.map((attr) => attr.toUpperCase());\r\n    return attributes.filter((item) => !exceptions.includes(item.name.toUpperCase()) && isDotAttribute(item.name));\r\n}\r\nexport const shouldShowField = (field, fieldsToShow) => {\r\n    const fields2Show = fieldsToShow ? fieldsToShow.split(',') : [];\r\n    return !fields2Show.length || fields2Show.includes(field.variable);\r\n};\r\nexport const getFieldVariableValue = (fieldVariables, key) => {\r\n    const variable = fieldVariables.filter((item) => item.key.toUpperCase() === key.toUpperCase())[0];\r\n    return variable && variable.value;\r\n};\r\nexport const getErrorMessage = (message) => {\r\n    const messageObj = JSON.parse(message);\r\n    return messageObj.errors.length && messageObj.errors[0].message\r\n        ? messageObj.errors[0].message\r\n        : message;\r\n};\r\nexport const getFieldsFromLayout = (layout) => {\r\n    return layout.reduce((acc, { columns }) => acc.concat(...columns.map((col) => col.fields)), []);\r\n};\r\nconst fieldParamsConversionFromBE = {\r\n    'Key-Value': (field) => {\r\n        if (field.defaultValue && typeof field.defaultValue !== 'string') {\r\n            const valuesArray = Object.keys(field.defaultValue).map((key) => {\r\n                return { key: key, value: field.defaultValue[key] };\r\n            });\r\n            field.defaultValue = getStringFromDotKeyArray(valuesArray);\r\n        }\r\n        return DotFormFields['Key-Value'](field);\r\n    }\r\n};\r\nexport const fieldCustomProcess = {\r\n    'DOT-KEY-VALUE': pipedValuesToObject\r\n};\r\nexport const fieldMap = {\r\n    Time: DotFormFields.Time,\r\n    Textarea: DotFormFields.Textarea,\r\n    Text: DotFormFields.Text,\r\n    Tag: DotFormFields.Tag,\r\n    Select: DotFormFields.Select,\r\n    Radio: DotFormFields.Radio,\r\n    'Multi-Select': DotFormFields['Multi-Select'],\r\n    'Key-Value': fieldParamsConversionFromBE['Key-Value'],\r\n    'Date-and-Time': DotFormFields['Date-and-Time'],\r\n    'Date-Range': DotFormFields['Date-Range'],\r\n    Date: DotFormFields.Date,\r\n    Checkbox: DotFormFields.Checkbox,\r\n    Binary: DotFormFields.Binary\r\n};\r\n"}