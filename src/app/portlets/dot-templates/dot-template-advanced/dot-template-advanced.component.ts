import { Component, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { DotRouterService } from '@services/dot-router/dot-router.service';
import { DotTemplatesService } from '@services/dot-templates/dot-templates.service';
import { DotContainer } from '@shared/models/container/dot-container.model';
import { Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { DotTemplate } from '@portlets/dot-edit-page/shared/models';
import * as _ from 'lodash';

@Component({
    selector: 'dot-template-advanced',
    templateUrl: './dot-template-advanced.component.html',
    styleUrls: ['./dot-template-advanced.scss']
})
export class DotTemplateComponent implements OnInit, OnDestroy {
    group: FormGroup;
    editor: any; // `any` because the type of the editor in the ngx-monaco-editor package is not typed
    actions = {
        primary: [
            {
                label: 'Save',
                disabled: true,
                command: () => {
                    this.saveTemplate();
                }
            }
        ],
        cancel: () => {
            console.log('cancel');
            this.dotRouterService.goToURL('/c/templates');
        }
    };
    private destroy$: Subject<boolean> = new Subject<boolean>();
    private originalValue: DotTemplate;

    constructor(
        private fb: FormBuilder,
        private dotTemplateService: DotTemplatesService,
        private dotRouterService: DotRouterService
    ) {}

    ngOnInit(): void {
        this.group = this.fb.group({
            title: ['', Validators.required],
            friendlyName: '',
            body: ['', Validators.required]
        });

        this.setFormOriginalValue();
        this.onFormValueChanges();
    }

    ngOnDestroy(): void {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * This method initializes the monaco editor
     *
     * @param {*} editor
     * @memberof DotTemplateComponent
     */
    initEditor(editor: any): void {
        this.editor = editor;
    }

    /**
     * This method creates the template
     *
     * @memberof DotTemplateComponent
     */
    saveTemplate(): void {
        this.dotTemplateService
            .create(this.group.value)
            .pipe(take(1))
            .subscribe(() => {
                if (this.group.valid) {
                    this.dotRouterService.goToURL('/c/templates');
                }
            });
    }
    /**
     * This method handles the change event of the searchable selector and
     * inserts the container to the editor
     *
     * @param {DotContainer} container
     * @memberof DotTemplateComponent
     */
    containerChange(container: DotContainer): void {
        const selection = this.editor.getSelection();

        const id = this.setContainerId(container);

        const text = `## Container: ${
            container.name
        }\n## This is autogenerated code that cannot be changed\n#parseContainer('${id}','${Date.now()}')\n`;
        const operation = { range: selection, text: text, forceMoveMarkers: true };
        this.editor.executeEdits('source', [operation]);
    }

    private setFormOriginalValue() {
        this.originalValue = this.group.value;
    }

    private onFormValueChanges() {
        this.group.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((values) => {
            this.setIsDisabled(values, this.originalValue);
        });
    }

    private setContainerId(container: DotContainer): string {
        const regex = new RegExp('//' + container.parentPermissionable.hostname);
        return container.identifier.includes(container.parentPermissionable.hostname)
            ? container.identifier.replace(regex, '')
            : container.identifier;
    }

    private setIsDisabled(values: DotTemplate, oldValues: DotTemplate): void {
        const [primary] = this.actions.primary;
        this.actions.primary[0] = {
            ...primary,
            disabled: _.isEqual(values, oldValues)
        };
    }
}
